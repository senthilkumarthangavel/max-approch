{"ast":null,"code":"export const validate = (json, index, state) => {\n  console.log(\"state \", state);\n  let a = state.q2,\n      b = state.q1,\n      q = 0,\n      r = 0;\n\n  if (index > 0) {\n    a = state && state.data && state.data[index - 1] && state.data[index - 1]['a'] ? state.data[index - 1]['a'] : state.q2;\n    b = state && state.data && state.data[index - 1] && state.data[index - 1]['b'] ? state.data[index - 1]['b'] : state.q1;\n    q = state && state.data && state.data[index - 1] && state.data[index - 1]['q'] ? state.data[index - 1]['q'] : 0;\n    r = state && state.data && state.data[index - 1] && state.data[index - 1]['r'] ? state.data[index - 1]['r'] : 0;\n  }\n\n  console.log('value_index', index);\n  console.log(\"result \", json);\n  console.log(\"a \", a);\n  console.log(\"b \", b);\n  console.log(\"q \", q);\n  console.log(\"r \", r); //condition1 - first operand check\n\n  const operand_one = json.fn;\n\n  if (operand_one !== 'equal') {\n    return \"String must have equal!\";\n  } //condition2 - quotient check\n\n\n  const q1_num = json.arg[0].num;\n\n  if (parseInt(q1_num) !== parseInt(a)) {\n    return \"Dividend is not correct!\";\n  } //add all conditions here\n  //console.log('quotient', quotient);\n  //console.log('remainder', remainder);\n  // const operand_one = enterValue.fn;\n  // const q1_num_arr = enterValue.arg\n  // const q1_num = enterValue.arg[0].num;\n  // const q2_num = enterValue.arg[1].arg[0].arg[0].num;\n  //const q3_num = enterValue.arg[1].arg[0].arg[1].num;\n  //const operand_two = enterValue.arg[1].arg[0].fn;\n  // const  operand_three = enterValue.arg[1].fn;\n  //console.log('enterValue', enterValue);\n  // console.log('q1_num_arr', q1_num_arr);\n  //console.log('q1_num', q1_num);\n  // console.log('q2_num', q2_num);\n  //console.log('q3_num', q3_num);\n  // console.log('operand_one', operand_one);\n  //  console.log('operand_two', operand_two);\n  // console.log('operand_three', operand_three);\n\n\n  return true;\n};\nexport const getResultObject = (json, index, state, org_text) => {\n  const q1_num = json.arg[0].num;\n  const q2_num = json.arg[1].arg[0].arg[0].num;\n  const q3_num = json.arg[1].arg[0].arg[1].num;\n  const reminder = getReminder(q1_num, q2_num);\n  let Obj = {\n    'a': q1_num,\n    'b': q2_num,\n    'q': q3_num,\n    'r': reminder,\n    org_text\n  };\n  let data = state && state.data ? state.data : {};\n  data[index] = Obj;\n  return data;\n};\n\nconst getReminder = (q1, q2) => {\n  let remainder_num;\n\n  if (q2 > q1) {\n    remainder_num = Math.floor(q2 % q1);\n  } else {\n    remainder_num = 0;\n  }\n\n  return remainder_num;\n};","map":{"version":3,"sources":["H:/Project/Technoduce/madhu/approach/approach/src/components/explore/hcf/validation.js"],"names":["validate","json","index","state","console","log","a","q2","b","q1","q","r","data","operand_one","fn","q1_num","arg","num","parseInt","getResultObject","org_text","q2_num","q3_num","reminder","getReminder","Obj","remainder_num","Math","floor"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,KAAd,KAAwB;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AAEG,MAAIG,CAAC,GAAGH,KAAK,CAACI,EAAd;AAAA,MAAkBC,CAAC,GAAGL,KAAK,CAACM,EAA5B;AAAA,MAAgCC,CAAC,GAAG,CAApC;AAAA,MAAuCC,CAAC,GAAG,CAA3C;;AACA,MAAIT,KAAK,GAAG,CAAZ,EAAe;AACXI,IAAAA,CAAC,GAAGH,KAAK,IAAIA,KAAK,CAACS,IAAf,IAAuBT,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,CAAvB,IAAgDC,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,EAAsB,GAAtB,CAAhD,GAA6EC,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,EAAsB,GAAtB,CAA7E,GAA0GC,KAAK,CAACI,EAApH;AACAC,IAAAA,CAAC,GAAGL,KAAK,IAAIA,KAAK,CAACS,IAAf,IAAuBT,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,CAAvB,IAAgDC,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,EAAsB,GAAtB,CAAhD,GAA6EC,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,EAAsB,GAAtB,CAA7E,GAA0GC,KAAK,CAACM,EAApH;AACAC,IAAAA,CAAC,GAAGP,KAAK,IAAIA,KAAK,CAACS,IAAf,IAAuBT,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,CAAvB,IAAgDC,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,EAAsB,GAAtB,CAAhD,GAA6EC,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,EAAsB,GAAtB,CAA7E,GAA0G,CAA9G;AACAS,IAAAA,CAAC,GAAGR,KAAK,IAAIA,KAAK,CAACS,IAAf,IAAuBT,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,CAAvB,IAAgDC,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,EAAsB,GAAtB,CAAhD,GAA6EC,KAAK,CAACS,IAAN,CAAWV,KAAK,GAAG,CAAnB,EAAsB,GAAtB,CAA7E,GAA0G,CAA9G;AACH;;AAGDE,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAA3B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,IAAvB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBC,CAAlB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBG,CAAlB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBK,CAAlB;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBM,CAAlB,EAjB4C,CAmB5C;;AACA,QAAME,WAAW,GAAGZ,IAAI,CAACa,EAAzB;;AACA,MAAID,WAAW,KAAK,OAApB,EAA4B;AACxB,WAAO,yBAAP;AACH,GAvB2C,CAyB5C;;;AACA,QAAME,MAAM,GAAGd,IAAI,CAACe,GAAL,CAAS,CAAT,EAAYC,GAA3B;;AACA,MAAIC,QAAQ,CAACH,MAAD,CAAR,KAAqBG,QAAQ,CAACZ,CAAD,CAAjC,EAAqC;AACjC,WAAO,0BAAP;AACH,GA7B2C,CAgC5C;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAO,IAAP;AACH,CA5DM;AA8DP,OAAO,MAAMa,eAAe,GAAG,CAAClB,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAqBiB,QAArB,KAAkC;AAE7D,QAAML,MAAM,GAAGd,IAAI,CAACe,GAAL,CAAS,CAAT,EAAYC,GAA3B;AACA,QAAMI,MAAM,GAAGpB,IAAI,CAACe,GAAL,CAAS,CAAT,EAAYA,GAAZ,CAAgB,CAAhB,EAAmBA,GAAnB,CAAuB,CAAvB,EAA0BC,GAAzC;AACA,QAAMK,MAAM,GAAGrB,IAAI,CAACe,GAAL,CAAS,CAAT,EAAYA,GAAZ,CAAgB,CAAhB,EAAmBA,GAAnB,CAAuB,CAAvB,EAA0BC,GAAzC;AACA,QAAMM,QAAQ,GAAGC,WAAW,CAACT,MAAD,EAASM,MAAT,CAA5B;AAEA,MAAII,GAAG,GAAG;AACN,SAAKV,MADC;AAEN,SAAKM,MAFC;AAGN,SAAKC,MAHC;AAIN,SAAKC,QAJC;AAKNH,IAAAA;AALM,GAAV;AAQA,MAAIR,IAAI,GAAGT,KAAK,IAAIA,KAAK,CAACS,IAAf,GAAsBT,KAAK,CAACS,IAA5B,GAAmC,EAA9C;AACAA,EAAAA,IAAI,CAACV,KAAD,CAAJ,GAAcuB,GAAd;AAEA,SAAOb,IAAP;AACH,CAnBM;;AAqBP,MAAMY,WAAW,GAAG,CAACf,EAAD,EAAKF,EAAL,KAAa;AAE7B,MAAImB,aAAJ;;AAEA,MAAInB,EAAE,GAAGE,EAAT,EAAa;AACTiB,IAAAA,aAAa,GAAIC,IAAI,CAACC,KAAL,CAAWrB,EAAE,GAAGE,EAAhB,CAAjB;AACH,GAFD,MAEO;AACHiB,IAAAA,aAAa,GAAG,CAAhB;AACH;;AAED,SAAOA,aAAP;AACH,CAXD","sourcesContent":["export const validate = (json, index, state) => {\r\n console.log(\"state \", state);\r\n    \r\n    let a = state.q2, b = state.q1, q = 0, r = 0;\r\n    if (index > 0) {\r\n        a = state && state.data && state.data[index - 1] && state.data[index - 1]['a'] ? state.data[index - 1]['a'] : state.q2;\r\n        b = state && state.data && state.data[index - 1] && state.data[index - 1]['b'] ? state.data[index - 1]['b'] : state.q1;\r\n        q = state && state.data && state.data[index - 1] && state.data[index - 1]['q'] ? state.data[index - 1]['q'] : 0;\r\n        r = state && state.data && state.data[index - 1] && state.data[index - 1]['r'] ? state.data[index - 1]['r'] : 0;\r\n    }\r\n\r\n    \r\n    console.log('value_index', index)       \r\n    console.log(\"result \", json);\r\n    console.log(\"a \", a);\r\n    console.log(\"b \", b);\r\n    console.log(\"q \", q);\r\n    console.log(\"r \", r);\r\n\r\n    //condition1 - first operand check\r\n    const operand_one = json.fn;\r\n    if (operand_one !== 'equal'){\r\n        return \"String must have equal!\";\r\n    }\r\n\r\n    //condition2 - quotient check\r\n    const q1_num = json.arg[0].num;\r\n    if (parseInt(q1_num) !== parseInt(a)){\r\n        return \"Dividend is not correct!\";\r\n    }\r\n\r\n    \r\n    //add all conditions here\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    //console.log('quotient', quotient);\r\n    //console.log('remainder', remainder);\r\n    // const operand_one = enterValue.fn;\r\n    // const q1_num_arr = enterValue.arg\r\n    // const q1_num = enterValue.arg[0].num;\r\n    // const q2_num = enterValue.arg[1].arg[0].arg[0].num;\r\n    //const q3_num = enterValue.arg[1].arg[0].arg[1].num;\r\n    //const operand_two = enterValue.arg[1].arg[0].fn;\r\n    // const  operand_three = enterValue.arg[1].fn;\r\n\r\n    //console.log('enterValue', enterValue);\r\n    // console.log('q1_num_arr', q1_num_arr);\r\n    //console.log('q1_num', q1_num);\r\n    // console.log('q2_num', q2_num);\r\n    //console.log('q3_num', q3_num);\r\n    // console.log('operand_one', operand_one);\r\n    //  console.log('operand_two', operand_two);\r\n    // console.log('operand_three', operand_three);\r\n    \r\n    return true;\r\n};\r\n\r\nexport const getResultObject = (json, index, state, org_text) => {\r\n    \r\n    const q1_num = json.arg[0].num;\r\n    const q2_num = json.arg[1].arg[0].arg[0].num;\r\n    const q3_num = json.arg[1].arg[0].arg[1].num;\r\n    const reminder = getReminder(q1_num, q2_num);\r\n\r\n    let Obj = {\r\n        'a': q1_num,\r\n        'b': q2_num,\r\n        'q': q3_num,\r\n        'r': reminder,\r\n        org_text\r\n    };\r\n\r\n    let data = state && state.data ? state.data : {};\r\n    data[index] = Obj;\r\n\r\n    return data;\r\n}\r\n\r\nconst getReminder = (q1, q2) =>  {\r\n\r\n    let remainder_num;\r\n\r\n    if (q2 > q1) {\r\n        remainder_num = (Math.floor(q2 % q1));\r\n    } else {\r\n        remainder_num = 0;\r\n    }\r\n\r\n    return remainder_num;\r\n}"]},"metadata":{},"sourceType":"module"}