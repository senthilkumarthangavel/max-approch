{"ast":null,"code":"var _jsxFileName = \"D:\\\\Madhu\\\\approach\\\\src\\\\components\\\\explore.jsx\";\nimport React from 'react';\nimport { MathFieldComponent } from 'react-mathlive';\nimport MathLive from 'mathlive';\nimport { useState, useEffect, useRef } from 'react';\n\nconst MultiMath = ({\n  active\n}) => {\n  const [count, setCount] = React.useState([0]);\n  const [add, setadd] = React.useState(true);\n  const targetRef = useRef();\n  const targeRef = useRef();\n  console.log('active', active);\n  useEffect(() => {\n    if (targetRef, targeRef) {\n      const mathField = MathLive.makeMathField(targetRef.current, targeRef.current);\n      mathField.$setConfig({\n        virtualKeyboardMode: 'onfocus',\n        virtualKeyboards: 'all',\n        onContentDidChange: mathfield => {\n          try {\n            const ast = MathLive.latexToAST(mathfield.$text());\n            document.getElementById('output').innerHTML = JSON.stringify(mathJsonToMathjs(ast, {}).eval()); // document.getElementById('output').innerHTML = JSON.stringify(ast);\n          } catch (e) {\n            document.getElementById('output').innerHTML = 'ðŸ˜•';\n          }\n        }\n      });\n    }\n  }, [targetRef]);\n\n  const addQuestion = () => {\n    let counter = count.concat(['']);\n    setCount(counter);\n    console.log(count);\n    setadd(!add);\n  };\n\n  const handleDelete = i => e => {\n    e.preventDefault();\n    let newarr = [...count.slice(0, i), ...count.slice(i + 1)];\n    setCount(newarr);\n  };\n\n  console.log(add);\n  console.log('length', count.length);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, \"Use Math editor for calculation \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Steps: 1\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"wrap-set\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    ref: targeRef,\n    className: 'fieldwrap',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addQuestion,\n    className: 'editor-plus btn btn-primary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }\n  }, \"+\")), count.slice(0, 4).map((count, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"wrap-set\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }, \"Step:\\xA0\", parseInt(`${index}`) + 2), /*#__PURE__*/React.createElement(\"span\", {\n    ref: targetRef,\n    className: 'fieldwrap',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleDelete(index),\n    className: 'editor-plus sub btn btn-primary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"-\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: addQuestion,\n    className: 'editor-plus btn btn-primary',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"+\"))), /*#__PURE__*/React.createElement(\"pre\", {\n    id: \"output\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 10\n    }\n  }));\n};\n\nfunction applySuperscriptAsPower(mjs, mathJson, config) {\n  let result = mjs;\n\n  if (typeof mathJson === 'object' && mathJson.sup !== undefined) {\n    result = new window.math.expression.node.FunctionNode('pow', [result, mathJsonToMathjs(mathJson.sup, config)]);\n  }\n\n  return result;\n}\n\nfunction getMathjsArgs(mathJson, config) {\n  let result = [];\n\n  if (Array.isArray(mathJson.arg)) {\n    for (let index = 0; index < mathJson.arg.length; index++) {\n      result.push(mathJsonToMathjs(mathJson.arg[index], config));\n    }\n  } else {\n    result = [mathJsonToMathjs(mathJson.arg, config)];\n  }\n\n  return result;\n}\n/**\r\n * Return an array of arguments, with the sub if present as the last argument.\r\n */\n\n\nfunction getMathjsArgsWithSub(mathJson, config) {\n  const result = getMathjsArgs(mathJson, config);\n\n  if (mathJson.sub !== undefined) {\n    result.push(mathJsonToMathjs(mathJson.sub, config));\n  }\n\n  return result;\n}\n/**\r\n * Return a mathjs node tree corresponding to the MathjSON object\r\n * @param {Object.<string,any>} mathJson\r\n */\n\n\nfunction mathJsonToMathjs(mathJson, config) {\n  let result;\n  if (mathJson === undefined) return undefined;\n\n  if (typeof mathJson === 'number' || mathJson.num !== undefined) {\n    let n = typeof mathJson === 'number' ? mathJson : mathJson.num; // Convert to BigNum if required\n\n    if (config.number === 'BigNumber') n = window.math.bignumber(n);\n    result = new window.math.expression.node.ConstantNode(n); // Apply the superscript as an operation\n\n    result = applySuperscriptAsPower(result, mathJson, config);\n  } else if (typeof mathJson === 'string' || mathJson.sym !== undefined) {\n    const BUILT_IN_CONSTANTS = {\n      Ï€: window.math.pi,\n      Ï„: window.math.tau,\n      // GREEK SMALL LETTER TAU\n      â„¯: window.math.e,\n      // â„¯ SCRIPT SMALL E\n      â…‡: window.math.e,\n      // â…‡ DOUBLE-STRUCK ITALIC SMALL E\n      e: window.math.e,\n      Ï•: window.math.phi,\n      //  GREEK SMALL LETTER PHI\n      â…ˆ: window.math.i,\n      // â…ˆ DOUBLE-STRUCK ITALIC SMALL I\n      â…‰: window.math.i,\n      // â…‰ DOUBLE-STRUCK ITALIC SMALL J\n      i: window.math.i //\n\n    };\n    const symbol = typeof mathJson === 'string' ? mathJson : mathJson.sym;\n\n    if (BUILT_IN_CONSTANTS[symbol]) {\n      result = new window.math.expression.node.ConstantNode(BUILT_IN_CONSTANTS[symbol]);\n    }\n\n    result = applySuperscriptAsPower(result, mathJson, config);\n  } else if (mathJson.op !== undefined) {\n    if (mathJson.lhs !== undefined && mathJson.rhs !== undefined) {\n      const OPERATOR_FUNCTIONS = {\n        '+': 'add',\n        '-': 'subtract',\n        '*': 'multiply',\n        '/': 'divide',\n        // '.*': 'dotMultiply',\n        // './': 'dotDivide',\n        '%': 'mod',\n        mod: 'mod'\n      };\n      const args = [mathJsonToMathjs(mathJson.lhs, config), mathJsonToMathjs(mathJson.rhs, config)];\n      result = new window.math.expression.node.OperatorNode(mathJson.op, OPERATOR_FUNCTIONS[mathJson.op], args);\n    } else if (mathJson.rhs !== undefined) {\n      const UNARY_OPERATOR_FUNCTIONS = {\n        '-': 'unaryMinus',\n        '+': 'unaryPlus' // '~': 'bitNot',\n        // 'not': 'not'\n\n      };\n      result = new window.math.expression.node.OperatorNode(mathJson.op, UNARY_OPERATOR_FUNCTIONS[mathJson.op], [mathJsonToMathjs(mathJson.rhs, config)]);\n    }\n  } else if (mathJson.fn) {\n    if (mathJson.fn === 'log' || mathJson.fn === 'ln' && mathJson.fn.sub !== undefined) {\n      result = new window.math.expression.node.FunctionNode('log', getMathjsArgsWithSub(mathJson, config));\n    } else if (mathJson.fn === 'lb') {\n      const args = getMathjsArgs(mathJson, config);\n      args.push(new window.math.expression.node.ConstantNode(window.math.bignumber(2)));\n      result = new window.math.expression.node.FunctionNode('log', args);\n    } else if (mathJson.fn === 'lg') {\n      result = new window.math.expression.node.FunctionNode(new window.math.expression.node.SymbolNode('log10'), getMathjsArgs(mathJson, config));\n    } else {\n      const fnName = {\n        '+': 'add',\n        '-': 'subtract',\n        '*': 'multiply',\n        '/': 'divide',\n        randomReal: 'random',\n        randomInteger: 'randomInt',\n        Gamma: 'gamma',\n        Re: 're',\n        Im: 'im',\n        binom: 'composition',\n        ucorner: 'ceil',\n        lcorner: 'floor',\n        arccos: 'acos',\n        arcsin: 'asin',\n        arctan: 'atan',\n        arcosh: 'acosh',\n        arsinh: '         asinh'\n      }[mathJson.fn] || mathJson.fn;\n      result = new window.math.expression.node.FunctionNode(fnName, getMathjsArgs(mathJson, config));\n    }\n  } else if (mathJson.group) {\n    result = applySuperscriptAsPower(mathJsonToMathjs(mathJson.group, config), mathJson, config);\n  }\n\n  return result;\n}\n\nexport default MultiMath;","map":{"version":3,"sources":["D:/Madhu/approach/src/components/explore.jsx"],"names":["React","MathFieldComponent","MathLive","useState","useEffect","useRef","MultiMath","active","count","setCount","add","setadd","targetRef","targeRef","console","log","mathField","makeMathField","current","$setConfig","virtualKeyboardMode","virtualKeyboards","onContentDidChange","mathfield","ast","latexToAST","$text","document","getElementById","innerHTML","JSON","stringify","mathJsonToMathjs","eval","e","addQuestion","counter","concat","handleDelete","i","preventDefault","newarr","slice","length","map","index","parseInt","applySuperscriptAsPower","mjs","mathJson","config","result","sup","undefined","window","math","expression","node","FunctionNode","getMathjsArgs","Array","isArray","arg","push","getMathjsArgsWithSub","sub","num","n","number","bignumber","ConstantNode","sym","BUILT_IN_CONSTANTS","Ï€","pi","Ï„","tau","â„¯","â…‡","Ï•","phi","â…ˆ","â…‰","symbol","op","lhs","rhs","OPERATOR_FUNCTIONS","mod","args","OperatorNode","UNARY_OPERATOR_FUNCTIONS","fn","SymbolNode","fnName","randomReal","randomInteger","Gamma","Re","Im","binom","ucorner","lcorner","arccos","arcsin","arctan","arcosh","arsinh","group"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { MathFieldComponent } from 'react-mathlive';\r\nimport MathLive from 'mathlive';\r\nimport{ useState, useEffect, useRef } from 'react';\r\n\r\nconst MultiMath = ({active}) => {\r\n\r\n    const [count, setCount] = React.useState([0]);\r\n    const [add, setadd] = React.useState(true);\r\n    const targetRef = useRef();\r\n    const targeRef = useRef();\r\n    console.log('active', active);\r\n    useEffect(() => {\r\n       \r\n        if (targetRef, targeRef) {\r\n           \r\n          const mathField = MathLive.makeMathField(targetRef.current, targeRef.current);\r\n           mathField.$setConfig({\r\n        virtualKeyboardMode: 'onfocus',\r\n        virtualKeyboards: 'all',\r\n        onContentDidChange: mathfield => {\r\n          try {\r\n              const ast = MathLive.latexToAST(mathfield.$text());\r\n              document.getElementById(\r\n                  'output'\r\n              ).innerHTML = JSON.stringify(\r\n                  mathJsonToMathjs(ast, {}).eval()\r\n              );\r\n              // document.getElementById('output').innerHTML = JSON.stringify(ast);\r\n          } catch (e) {\r\n              document.getElementById('output').innerHTML = 'ðŸ˜•';\r\n          }\r\n        },\r\n      })\r\n        }\r\n      }, [targetRef]);\r\n\r\n\r\n\r\n\r\n\r\n    const addQuestion = () =>{\r\n        let counter = count.concat([''])\r\n\r\n        setCount(counter)\r\n        console.log(count)\r\n        setadd(!add)\r\n       \r\n    }\r\n\r\n    const handleDelete = i => e => {\r\n        e.preventDefault()\r\n        let newarr = [\r\n          ...count.slice(0, i),\r\n          ...count.slice(i + 1)\r\n        ]\r\n        setCount(newarr)\r\n      }\r\n    console.log(add)\r\n        console.log('length', count.length);\r\n    return (\r\n\r\n      <div className=\"App\">\r\n          <p>Use Math editor for calculation </p>\r\n          <p>Steps: 1</p>\r\n          <div className=\"wrap-set\">\r\n              <span ref={targeRef} className={'fieldwrap'}></span> \r\n               <button onClick={addQuestion} className={'editor-plus btn btn-primary'}>+</button> \r\n               </div>\r\n           {count.slice(0, 4).map((count, index ) => (\r\n          <div key={index} className=\"wrap-set\">\r\n              <p>Step:&nbsp;{parseInt(`${index}`) + 2}</p>\r\n         <span ref={targetRef} className={'fieldwrap'}></span>  \r\n          <button onClick={handleDelete(index)} className={'editor-plus sub btn btn-primary'}>-</button>\r\n          <button onClick={addQuestion} className={'editor-plus btn btn-primary'}>+</button> \r\n          </div>\r\n        ))}\r\n     \r\n         <pre id=\"output\"></pre>\r\n      </div>\r\n    );\r\n  }\r\n  \r\nfunction applySuperscriptAsPower(mjs, mathJson, config) {\r\n    let result = mjs;\r\n    if (\r\n        typeof mathJson === 'object' &&\r\n        mathJson.sup !== undefined\r\n    ) {\r\n        result = new window.math.expression.node.FunctionNode(\r\n            'pow',\r\n            [result, mathJsonToMathjs(mathJson.sup, config)]\r\n        );\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction getMathjsArgs(mathJson, config) {\r\n    let result = [];\r\n    if (Array.isArray(mathJson.arg)) {\r\n        for (\r\n            let index = 0;\r\n            index < mathJson.arg.length;\r\n            index++\r\n        ) {\r\n            result.push(\r\n                mathJsonToMathjs(mathJson.arg[index], config)\r\n            );\r\n        }\r\n    } else {\r\n        result = [mathJsonToMathjs(mathJson.arg, config)];\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Return an array of arguments, with the sub if present as the last argument.\r\n */\r\nfunction getMathjsArgsWithSub(mathJson, config) {\r\n    const result = getMathjsArgs(mathJson, config);\r\n    if (mathJson.sub !== undefined) {\r\n        result.push(mathJsonToMathjs(mathJson.sub, config));\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Return a mathjs node tree corresponding to the MathjSON object\r\n * @param {Object.<string,any>} mathJson\r\n */\r\nfunction mathJsonToMathjs(mathJson, config) {\r\n    let result;\r\n    if (mathJson === undefined) return undefined;\r\n\r\n    if (\r\n        typeof mathJson === 'number' ||\r\n        mathJson.num !== undefined\r\n    ) {\r\n        let n =\r\n            typeof mathJson === 'number'\r\n                ? mathJson\r\n                : mathJson.num;\r\n\r\n        // Convert to BigNum if required\r\n        if (config.number === 'BigNumber')\r\n            n = window.math.bignumber(n);\r\n\r\n        result = new window.math.expression.node.ConstantNode(\r\n            n\r\n        );\r\n\r\n        // Apply the superscript as an operation\r\n        result = applySuperscriptAsPower(\r\n            result,\r\n            mathJson,\r\n            config\r\n        );\r\n    } else if (\r\n        typeof mathJson === 'string' ||\r\n        mathJson.sym !== undefined\r\n    ) {\r\n        const BUILT_IN_CONSTANTS = {\r\n            Ï€: window.math.pi,\r\n            Ï„: window.math.tau, // GREEK SMALL LETTER TAU\r\n            â„¯: window.math.e, // â„¯ SCRIPT SMALL E\r\n            â…‡: window.math.e, // â…‡ DOUBLE-STRUCK ITALIC SMALL E\r\n            e: window.math.e,\r\n            Ï•: window.math.phi, //  GREEK SMALL LETTER PHI\r\n            â…ˆ: window.math.i, // â…ˆ DOUBLE-STRUCK ITALIC SMALL I\r\n            â…‰: window.math.i, // â…‰ DOUBLE-STRUCK ITALIC SMALL J\r\n            i: window.math.i, //\r\n        };\r\n        const symbol =\r\n            typeof mathJson === 'string'\r\n                ? mathJson\r\n                : mathJson.sym;\r\n        if (BUILT_IN_CONSTANTS[symbol]) {\r\n            result = new window.math.expression.node.ConstantNode(\r\n                BUILT_IN_CONSTANTS[symbol]\r\n            );\r\n        } \r\n        result = applySuperscriptAsPower(\r\n            result,\r\n            mathJson,\r\n            config\r\n        );\r\n    } else if (mathJson.op !== undefined) {\r\n        if (\r\n            mathJson.lhs !== undefined &&\r\n            mathJson.rhs !== undefined\r\n        ) {\r\n            const OPERATOR_FUNCTIONS = {\r\n                '+': 'add',\r\n                '-': 'subtract',\r\n                '*': 'multiply',\r\n                '/': 'divide',\r\n                // '.*': 'dotMultiply',\r\n                // './': 'dotDivide',\r\n                '%': 'mod',\r\n                mod: 'mod',\r\n            };\r\n            const args = [\r\n                mathJsonToMathjs(mathJson.lhs, config),\r\n                mathJsonToMathjs(mathJson.rhs, config),\r\n            ];\r\n            result = new window.math.expression.node.OperatorNode(\r\n                mathJson.op,\r\n                OPERATOR_FUNCTIONS[mathJson.op],\r\n                args\r\n            );\r\n        } else if (mathJson.rhs !== undefined) {\r\n            const UNARY_OPERATOR_FUNCTIONS = {\r\n                '-': 'unaryMinus',\r\n                '+': 'unaryPlus',\r\n                // '~': 'bitNot',\r\n                // 'not': 'not'\r\n            };\r\n            result = new window.math.expression.node.OperatorNode(\r\n                mathJson.op,\r\n                UNARY_OPERATOR_FUNCTIONS[mathJson.op],\r\n                [mathJsonToMathjs(mathJson.rhs, config)]\r\n            );\r\n        }\r\n    } else if (mathJson.fn) {\r\n        if (\r\n            mathJson.fn === 'log' ||\r\n            (mathJson.fn === 'ln' &&\r\n                mathJson.fn.sub !== undefined)\r\n        ) {\r\n            result = new window.math.expression.node.FunctionNode(\r\n                'log',\r\n                getMathjsArgsWithSub(mathJson, config)\r\n            );\r\n        } else if (mathJson.fn === 'lb') {\r\n            const args = getMathjsArgs(mathJson, config);\r\n            args.push(\r\n                new window.math.expression.node.ConstantNode(\r\n                    window.math.bignumber(2)\r\n                )\r\n            );\r\n            result = new window.math.expression.node.FunctionNode(\r\n                'log',\r\n                args\r\n            );\r\n        } else if (mathJson.fn === 'lg') {\r\n            result = new window.math.expression.node.FunctionNode(\r\n                new window.math.expression.node.SymbolNode(\r\n                    'log10'\r\n                ),\r\n                getMathjsArgs(mathJson, config)\r\n            );\r\n        } else {\r\n            const fnName =\r\n                {\r\n                    '+': 'add',\r\n                    '-': 'subtract',\r\n                    '*': 'multiply',\r\n                    '/': 'divide',\r\n                    randomReal: 'random',\r\n                    randomInteger: 'randomInt',\r\n                    Gamma: 'gamma',\r\n                    Re: 're',\r\n                    Im: 'im',\r\n                    binom: 'composition',\r\n                    ucorner: 'ceil',\r\n                    lcorner: 'floor',\r\n                    arccos: 'acos',\r\n                    arcsin: 'asin',\r\n                    arctan: 'atan',\r\n                    arcosh: 'acosh',\r\n                    arsinh: '         asinh',\r\n                }[mathJson.fn] || mathJson.fn;\r\n\r\n            result = new window.math.expression.node.FunctionNode(\r\n                fnName,\r\n                getMathjsArgs(mathJson, config)\r\n            );\r\n        }\r\n    } else if (mathJson.group) {\r\n        result = applySuperscriptAsPower(\r\n            mathJsonToMathjs(mathJson.group, config),\r\n            mathJson,\r\n            config\r\n        );\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport default MultiMath;"]},"metadata":{},"sourceType":"module"}