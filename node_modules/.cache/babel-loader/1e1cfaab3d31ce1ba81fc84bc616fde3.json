{"ast":null,"code":"var _jsxFileName = \"D:\\\\Madhu\\\\approach\\\\src\\\\components\\\\explore.jsx\";\nimport React, { Component } from 'react';\nimport { MathFieldComponent } from 'react-mathlive';\nimport MathLive from 'mathlive';\n\nclass MultiMath extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      const target = e.target;\n      console.log('target', target);\n\n      if (target) {\n        console.log('target', target);\n        const mathField = MathLive.makeMathField(target);\n        console.log('mathField', mathField);\n        mathField.$setConfig({\n          virtualKeyboardMode: 'onfocus',\n          virtualKeyboards: 'all',\n          onContentDidChange: mathfield => {\n            try {\n              const ast = MathLive.latexToAST(mathfield.$text());\n              document.getElementById('output').innerHTML = JSON.stringify(mathJsonToMathjs(ast, {}).eval()); // document.getElementById('output').innerHTML = JSON.stringify(ast);\n            } catch (e) {\n              document.getElementById('output').innerHTML = 'ðŸ˜•';\n            }\n          }\n        });\n      }\n    };\n\n    this.addQuestion = () => {\n      let counter = this.state.count.concat(['']);\n      this.setState({\n        count: counter,\n        add: !this.state.add\n      });\n    };\n\n    this.handleDelete = i => e => {\n      e.preventDefault();\n      let newarr = [...this.state.count.slice(0, i), ...this.state.count.slice(i + 1)];\n      this.setState({\n        count: newarr\n      });\n    };\n\n    this.state = {\n      count: [0],\n      add: false\n    };\n  }\n\n  render() {\n    const {\n      count\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, \"Use Math editor for calculation \"), count.slice(0, 4).map((count, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"wrap-set\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, \"Step:\\xA0\", parseInt(`${index}`) + 1), /*#__PURE__*/React.createElement(\"span\", {\n      className: 'fieldwrap',\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 10\n      }\n    }), parseInt(index) + 1 === 1 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addQuestion,\n      className: 'editor-plus btn btn-primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, \"+\"), \" \") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleDelete(index),\n      className: 'editor-plus sub btn btn-primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 12\n      }\n    }, \"-\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addQuestion,\n      className: 'editor-plus btn btn-primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 10\n      }\n    }, \"+\"), \" \"))), /*#__PURE__*/React.createElement(\"pre\", {\n      id: \"output\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 10\n      }\n    })));\n  }\n\n  applySuperscriptAsPower(mjs, mathJson, config) {\n    let result = mjs;\n\n    if (typeof mathJson === 'object' && mathJson.sup !== undefined) {\n      result = new window.math.expression.node.FunctionNode('pow', [result, mathJsonToMathjs(mathJson.sup, config)]);\n    }\n\n    return result;\n  }\n\n  getMathjsArgs(mathJson, config) {\n    let result = [];\n\n    if (Array.isArray(mathJson.arg)) {\n      for (let index = 0; index < mathJson.arg.length; index++) {\n        result.push(mathJsonToMathjs(mathJson.arg[index], config));\n      }\n    } else {\n      result = [mathJsonToMathjs(mathJson.arg, config)];\n    }\n\n    return result;\n  }\n  /**\r\n   * Return an array of arguments, with the sub if present as the last argument.\r\n   */\n\n\n  getMathjsArgsWithSub(mathJson, config) {\n    const result = getMathjsArgs(mathJson, config);\n\n    if (mathJson.sub !== undefined) {\n      result.push(mathJsonToMathjs(mathJson.sub, config));\n    }\n\n    return result;\n  }\n  /**\r\n   * Return a mathjs node tree corresponding to the MathjSON object\r\n   * @param {Object.<string,any>} mathJson\r\n   */\n\n\n  mathJsonToMathjs(mathJson, config) {\n    let result;\n    if (mathJson === undefined) return undefined;\n\n    if (typeof mathJson === 'number' || mathJson.num !== undefined) {\n      let n = typeof mathJson === 'number' ? mathJson : mathJson.num; // Convert to BigNum if required\n\n      if (config.number === 'BigNumber') n = window.math.bignumber(n);\n      result = new window.math.expression.node.ConstantNode(n); // Apply the superscript as an operation\n\n      result = applySuperscriptAsPower(result, mathJson, config);\n    } else if (typeof mathJson === 'string' || mathJson.sym !== undefined) {\n      const BUILT_IN_CONSTANTS = {\n        Ï€: window.math.pi,\n        Ï„: window.math.tau,\n        // GREEK SMALL LETTER TAU\n        â„¯: window.math.e,\n        // â„¯ SCRIPT SMALL E\n        â…‡: window.math.e,\n        // â…‡ DOUBLE-STRUCK ITALIC SMALL E\n        e: window.math.e,\n        Ï•: window.math.phi,\n        //  GREEK SMALL LETTER PHI\n        â…ˆ: window.math.i,\n        // â…ˆ DOUBLE-STRUCK ITALIC SMALL I\n        â…‰: window.math.i,\n        // â…‰ DOUBLE-STRUCK ITALIC SMALL J\n        i: window.math.i //\n\n      };\n      const symbol = typeof mathJson === 'string' ? mathJson : mathJson.sym;\n\n      if (BUILT_IN_CONSTANTS[symbol]) {\n        result = new window.math.expression.node.ConstantNode(BUILT_IN_CONSTANTS[symbol]);\n      }\n\n      result = applySuperscriptAsPower(result, mathJson, config);\n    } else if (mathJson.op !== undefined) {\n      if (mathJson.lhs !== undefined && mathJson.rhs !== undefined) {\n        const OPERATOR_FUNCTIONS = {\n          '+': 'add',\n          '-': 'subtract',\n          '*': 'multiply',\n          '/': 'divide',\n          // '.*': 'dotMultiply',\n          // './': 'dotDivide',\n          '%': 'mod',\n          mod: 'mod'\n        };\n        const args = [mathJsonToMathjs(mathJson.lhs, config), mathJsonToMathjs(mathJson.rhs, config)];\n        result = new window.math.expression.node.OperatorNode(mathJson.op, OPERATOR_FUNCTIONS[mathJson.op], args);\n      } else if (mathJson.rhs !== undefined) {\n        const UNARY_OPERATOR_FUNCTIONS = {\n          '-': 'unaryMinus',\n          '+': 'unaryPlus' // '~': 'bitNot',\n          // 'not': 'not'\n\n        };\n        result = new window.math.expression.node.OperatorNode(mathJson.op, UNARY_OPERATOR_FUNCTIONS[mathJson.op], [mathJsonToMathjs(mathJson.rhs, config)]);\n      }\n    } else if (mathJson.fn) {\n      if (mathJson.fn === 'log' || mathJson.fn === 'ln' && mathJson.fn.sub !== undefined) {\n        result = new window.math.expression.node.FunctionNode('log', getMathjsArgsWithSub(mathJson, config));\n      } else if (mathJson.fn === 'lb') {\n        const args = getMathjsArgs(mathJson, config);\n        args.push(new window.math.expression.node.ConstantNode(window.math.bignumber(2)));\n        result = new window.math.expression.node.FunctionNode('log', args);\n      } else if (mathJson.fn === 'lg') {\n        result = new window.math.expression.node.FunctionNode(new window.math.expression.node.SymbolNode('log10'), getMathjsArgs(mathJson, config));\n      } else {\n        const fnName = {\n          '+': 'add',\n          '-': 'subtract',\n          '*': 'multiply',\n          '/': 'divide',\n          randomReal: 'random',\n          randomInteger: 'randomInt',\n          Gamma: 'gamma',\n          Re: 're',\n          Im: 'im',\n          binom: 'composition',\n          ucorner: 'ceil',\n          lcorner: 'floor',\n          arccos: 'acos',\n          arcsin: 'asin',\n          arctan: 'atan',\n          arcosh: 'acosh',\n          arsinh: '         asinh'\n        }[mathJson.fn] || mathJson.fn;\n        result = new window.math.expression.node.FunctionNode(fnName, getMathjsArgs(mathJson, config));\n      }\n    } else if (mathJson.group) {\n      result = applySuperscriptAsPower(mathJsonToMathjs(mathJson.group, config), mathJson, config);\n    }\n\n    return result;\n  }\n\n}\n\nexport default MultiMath;","map":{"version":3,"sources":["D:/Madhu/approach/src/components/explore.jsx"],"names":["React","Component","MathFieldComponent","MathLive","MultiMath","constructor","handleChange","e","target","console","log","mathField","makeMathField","$setConfig","virtualKeyboardMode","virtualKeyboards","onContentDidChange","mathfield","ast","latexToAST","$text","document","getElementById","innerHTML","JSON","stringify","mathJsonToMathjs","eval","addQuestion","counter","state","count","concat","setState","add","handleDelete","i","preventDefault","newarr","slice","render","map","index","parseInt","applySuperscriptAsPower","mjs","mathJson","config","result","sup","undefined","window","math","expression","node","FunctionNode","getMathjsArgs","Array","isArray","arg","length","push","getMathjsArgsWithSub","sub","num","n","number","bignumber","ConstantNode","sym","BUILT_IN_CONSTANTS","Ï€","pi","Ï„","tau","â„¯","â…‡","Ï•","phi","â…ˆ","â…‰","symbol","op","lhs","rhs","OPERATOR_FUNCTIONS","mod","args","OperatorNode","UNARY_OPERATOR_FUNCTIONS","fn","SymbolNode","fnName","randomReal","randomInteger","Gamma","Re","Im","binom","ucorner","lcorner","arccos","arcsin","arctan","arcosh","arsinh","group"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { MathFieldComponent } from 'react-mathlive';\r\nimport MathLive from 'mathlive';\r\n\r\n\r\nclass MultiMath extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count: [0],\r\n            add: false\r\n        }\r\n    }\r\n\r\n    handleChange = (e) =>{\r\n\r\n        const target = e.target;\r\n        console.log('target', target);\r\n        if (target) {\r\n         console.log('target', target);\r\n       const mathField = MathLive.makeMathField(target);\r\n       console.log('mathField', mathField);\r\n \r\n       mathField.$setConfig({\r\n         virtualKeyboardMode: 'onfocus',\r\n         virtualKeyboards: 'all',\r\n         onContentDidChange: mathfield => {\r\n           try {\r\n               const ast = MathLive.latexToAST(mathfield.$text());\r\n               document.getElementById(\r\n                   'output'\r\n               ).innerHTML = JSON.stringify(\r\n                   mathJsonToMathjs(ast, {}).eval()\r\n               );\r\n               // document.getElementById('output').innerHTML = JSON.stringify(ast);\r\n           } catch (e) {\r\n               document.getElementById('output').innerHTML = 'ðŸ˜•';\r\n           }\r\n         },\r\n       })\r\n      }\r\n\r\n    }\r\n\r\n    addQuestion = () =>{\r\n        let counter = this.state.count.concat([''])\r\n        this.setState({\r\n            count: counter,\r\n            add: (!this.state.add)\r\n        })\r\n       \r\n        \r\n    }\r\n\r\n     handleDelete = i => e => {\r\n        e.preventDefault()\r\n        let newarr = [\r\n          ...this.state.count.slice(0, i),\r\n          ...this.state.count.slice(i + 1)\r\n        ]\r\n        this.setState({\r\n             count: newarr\r\n        })\r\n      }\r\n\r\n    render(){\r\n         const { count } = this.state\r\n        return(\r\n            <div>\r\n                    \r\n      <div className=\"App\">\r\n          <p>Use Math editor for calculation </p>\r\n         {count.slice(0, 4).map((count, index ) => (\r\n        \r\n          <div key={index} className=\"wrap-set\">\r\n        <p>Step:&nbsp;{parseInt(`${index}`) + 1}</p>\r\n         <span className={'fieldwrap'} onChange={this.handleChange}></span>  \r\n         \r\n         {parseInt(index) + 1 ===  1 ?\r\n          <><button onClick={this.addQuestion} className={'editor-plus btn btn-primary'}>+</button> </>: \r\n         <><button onClick={this.handleDelete(index)} className={'editor-plus sub btn btn-primary'}>-</button>\r\n         <button onClick={this.addQuestion} className={'editor-plus btn btn-primary'}>+</button> </>}\r\n          </div>\r\n        ))  }\r\n     \r\n         <pre id=\"output\"></pre>\r\n\r\n      </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n     applySuperscriptAsPower(mjs, mathJson, config) {\r\n        let result = mjs;\r\n        if (\r\n            typeof mathJson === 'object' &&\r\n            mathJson.sup !== undefined\r\n        ) {\r\n            result = new window.math.expression.node.FunctionNode(\r\n                'pow',\r\n                [result, mathJsonToMathjs(mathJson.sup, config)]\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n    getMathjsArgs(mathJson, config) {\r\n        let result = [];\r\n        if (Array.isArray(mathJson.arg)) {\r\n            for (\r\n                let index = 0;\r\n                index < mathJson.arg.length;\r\n                index++\r\n            ) {\r\n                result.push(\r\n                    mathJsonToMathjs(mathJson.arg[index], config)\r\n                );\r\n            }\r\n        } else {\r\n            result = [mathJsonToMathjs(mathJson.arg, config)];\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * Return an array of arguments, with the sub if present as the last argument.\r\n     */\r\n    getMathjsArgsWithSub(mathJson, config) {\r\n        const result = getMathjsArgs(mathJson, config);\r\n        if (mathJson.sub !== undefined) {\r\n            result.push(mathJsonToMathjs(mathJson.sub, config));\r\n        }\r\n    \r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * Return a mathjs node tree corresponding to the MathjSON object\r\n     * @param {Object.<string,any>} mathJson\r\n     */\r\n    mathJsonToMathjs(mathJson, config) {\r\n        let result;\r\n        if (mathJson === undefined) return undefined;\r\n    \r\n        if (\r\n            typeof mathJson === 'number' ||\r\n            mathJson.num !== undefined\r\n        ) {\r\n            let n =\r\n                typeof mathJson === 'number'\r\n                    ? mathJson\r\n                    : mathJson.num;\r\n    \r\n            // Convert to BigNum if required\r\n            if (config.number === 'BigNumber')\r\n                n = window.math.bignumber(n);\r\n    \r\n            result = new window.math.expression.node.ConstantNode(\r\n                n\r\n            );\r\n    \r\n            // Apply the superscript as an operation\r\n            result = applySuperscriptAsPower(\r\n                result,\r\n                mathJson,\r\n                config\r\n            );\r\n        } else if (\r\n            typeof mathJson === 'string' ||\r\n            mathJson.sym !== undefined\r\n        ) {\r\n            const BUILT_IN_CONSTANTS = {\r\n                Ï€: window.math.pi,\r\n                Ï„: window.math.tau, // GREEK SMALL LETTER TAU\r\n                â„¯: window.math.e, // â„¯ SCRIPT SMALL E\r\n                â…‡: window.math.e, // â…‡ DOUBLE-STRUCK ITALIC SMALL E\r\n                e: window.math.e,\r\n                Ï•: window.math.phi, //  GREEK SMALL LETTER PHI\r\n                â…ˆ: window.math.i, // â…ˆ DOUBLE-STRUCK ITALIC SMALL I\r\n                â…‰: window.math.i, // â…‰ DOUBLE-STRUCK ITALIC SMALL J\r\n                i: window.math.i, //\r\n            };\r\n            const symbol =\r\n                typeof mathJson === 'string'\r\n                    ? mathJson\r\n                    : mathJson.sym;\r\n            if (BUILT_IN_CONSTANTS[symbol]) {\r\n                result = new window.math.expression.node.ConstantNode(\r\n                    BUILT_IN_CONSTANTS[symbol]\r\n                );\r\n            } \r\n            result = applySuperscriptAsPower(\r\n                result,\r\n                mathJson,\r\n                config\r\n            );\r\n        } else if (mathJson.op !== undefined) {\r\n            if (\r\n                mathJson.lhs !== undefined &&\r\n                mathJson.rhs !== undefined\r\n            ) {\r\n                const OPERATOR_FUNCTIONS = {\r\n                    '+': 'add',\r\n                    '-': 'subtract',\r\n                    '*': 'multiply',\r\n                    '/': 'divide',\r\n                    // '.*': 'dotMultiply',\r\n                    // './': 'dotDivide',\r\n                    '%': 'mod',\r\n                    mod: 'mod',\r\n                };\r\n                const args = [\r\n                    mathJsonToMathjs(mathJson.lhs, config),\r\n                    mathJsonToMathjs(mathJson.rhs, config),\r\n                ];\r\n                result = new window.math.expression.node.OperatorNode(\r\n                    mathJson.op,\r\n                    OPERATOR_FUNCTIONS[mathJson.op],\r\n                    args\r\n                );\r\n            } else if (mathJson.rhs !== undefined) {\r\n                const UNARY_OPERATOR_FUNCTIONS = {\r\n                    '-': 'unaryMinus',\r\n                    '+': 'unaryPlus',\r\n                    // '~': 'bitNot',\r\n                    // 'not': 'not'\r\n                };\r\n                result = new window.math.expression.node.OperatorNode(\r\n                    mathJson.op,\r\n                    UNARY_OPERATOR_FUNCTIONS[mathJson.op],\r\n                    [mathJsonToMathjs(mathJson.rhs, config)]\r\n                );\r\n            }\r\n        } else if (mathJson.fn) {\r\n            if (\r\n                mathJson.fn === 'log' ||\r\n                (mathJson.fn === 'ln' &&\r\n                    mathJson.fn.sub !== undefined)\r\n            ) {\r\n                result = new window.math.expression.node.FunctionNode(\r\n                    'log',\r\n                    getMathjsArgsWithSub(mathJson, config)\r\n                );\r\n            } else if (mathJson.fn === 'lb') {\r\n                const args = getMathjsArgs(mathJson, config);\r\n                args.push(\r\n                    new window.math.expression.node.ConstantNode(\r\n                        window.math.bignumber(2)\r\n                    )\r\n                );\r\n                result = new window.math.expression.node.FunctionNode(\r\n                    'log',\r\n                    args\r\n                );\r\n            } else if (mathJson.fn === 'lg') {\r\n                result = new window.math.expression.node.FunctionNode(\r\n                    new window.math.expression.node.SymbolNode(\r\n                        'log10'\r\n                    ),\r\n                    getMathjsArgs(mathJson, config)\r\n                );\r\n            } else {\r\n                const fnName =\r\n                    {\r\n                        '+': 'add',\r\n                        '-': 'subtract',\r\n                        '*': 'multiply',\r\n                        '/': 'divide',\r\n                        randomReal: 'random',\r\n                        randomInteger: 'randomInt',\r\n                        Gamma: 'gamma',\r\n                        Re: 're',\r\n                        Im: 'im',\r\n                        binom: 'composition',\r\n                        ucorner: 'ceil',\r\n                        lcorner: 'floor',\r\n                        arccos: 'acos',\r\n                        arcsin: 'asin',\r\n                        arctan: 'atan',\r\n                        arcosh: 'acosh',\r\n                        arsinh: '         asinh',\r\n                    }[mathJson.fn] || mathJson.fn;\r\n    \r\n                result = new window.math.expression.node.FunctionNode(\r\n                    fnName,\r\n                    getMathjsArgs(mathJson, config)\r\n                );\r\n            }\r\n        } else if (mathJson.group) {\r\n            result = applySuperscriptAsPower(\r\n                mathJsonToMathjs(mathJson.group, config),\r\n                mathJson,\r\n                config\r\n            );\r\n        }\r\n    \r\n        return result;\r\n    }\r\n}\r\nexport default MultiMath;"]},"metadata":{},"sourceType":"module"}