{"ast":null,"code":"var _jsxFileName = \"D:\\\\Madhu\\\\approach\\\\src\\\\components\\\\explore.jsx\";\nimport React, { Component } from 'react';\nimport { MathFieldComponent } from 'react-mathlive';\nimport MathLive from 'mathlive';\n\nclass MultiMath extends Component {\n  constructor() {\n    super();\n\n    this.addQuestion = () => {\n      let counter = this.state.count.concat(['']);\n      this.setState({\n        count: counter,\n        add: !this.state.add\n      });\n    };\n\n    this.handleDelete = i => e => {\n      e.preventDefault();\n      let newarr = [...this.state.count.slice(0, i), ...this.state.count.slice(i + 1)];\n      this.setState({\n        count: newarr\n      });\n    };\n\n    this.targetRef = React.createRef();\n    this.state = {\n      count: [1],\n      add: false,\n      q1: 135,\n      q2: 225\n    };\n  }\n\n  componentDidMount() {\n    const target = this.targetRef.current;\n    console.log('target', target);\n\n    if (target) {\n      const targete = MathLive.makeMathField(target, {\n        virtualKeyboardMode: 'onfocus',\n        virtualKeyboards: 'all',\n        onContentDidChange: target => {\n          try {\n            const ast = MathLive.latexToAST(targete.$text());\n            console.log('ast', ast);\n            console.log('ast', ast.fn);\n            ast.arg.length > 0 && ast.arg ? ast.arg.map((arg, index) => args.num) : null;\n            document.getElementById('output').innerHTML = JSON.stringify(mathJsonToMathjs(ast, {}).eval()); // document.getElementById('output').innerHTML = JSON.stringify(ast);\n          } catch (e) {\n            document.getElementById('output').innerHTML = 'ðŸ˜•';\n          }\n        }\n      });\n    }\n\n    function applySuperscriptAsPower(mjs, mathJson, config) {\n      let result = mjs;\n\n      if (typeof mathJson === 'object' && mathJson.sup !== undefined) {\n        result = new window.math.expression.node.FunctionNode('pow', [result, mathJsonToMathjs(mathJson.sup, config)]);\n      }\n\n      return result;\n    }\n\n    function getMathjsArgs(mathJson, config) {\n      let result = [];\n\n      if (Array.isArray(mathJson.arg)) {\n        for (let index = 0; index < mathJson.arg.length; index++) {\n          result.push(mathJsonToMathjs(mathJson.arg[index], config));\n        }\n      } else {\n        result = [mathJsonToMathjs(mathJson.arg, config)];\n      }\n\n      return result;\n    }\n    /**\r\n    * Return an array of arguments, with the sub if present as the last argument.\r\n    */\n\n\n    function getMathjsArgsWithSub(mathJson, config) {\n      const result = getMathjsArgs(mathJson, config);\n\n      if (mathJson.sub !== undefined) {\n        result.push(mathJsonToMathjs(mathJson.sub, config));\n      }\n\n      return result;\n    }\n    /**\r\n     * Return a mathjs node tree corresponding to the MathjSON object\r\n     * @param {Object.<string,any>} mathJson\r\n     */\n\n\n    function mathJsonToMathjs(mathJson, config) {\n      let result;\n      if (mathJson === undefined) return undefined;\n\n      if (typeof mathJson === 'number' || mathJson.num !== undefined) {\n        let n = typeof mathJson === 'number' ? mathJson : mathJson.num; // Convert to BigNum if required\n\n        if (config.number === 'BigNumber') n = window.math.bignumber(n);\n        result = new window.math.expression.node.ConstantNode(n); // Apply the superscript as an operation\n\n        result = applySuperscriptAsPower(result, mathJson, config);\n      } else if (typeof mathJson === 'string' || mathJson.sym !== undefined) {\n        const BUILT_IN_CONSTANTS = {\n          Ï€: window.math.pi,\n          Ï„: window.math.tau,\n          // GREEK SMALL LETTER TAU\n          â„¯: window.math.e,\n          // â„¯ SCRIPT SMALL E\n          â…‡: window.math.e,\n          // â…‡ DOUBLE-STRUCK ITALIC SMALL E\n          e: window.math.e,\n          Ï•: window.math.phi,\n          //  GREEK SMALL LETTER PHI\n          â…ˆ: window.math.i,\n          // â…ˆ DOUBLE-STRUCK ITALIC SMALL I\n          â…‰: window.math.i,\n          // â…‰ DOUBLE-STRUCK ITALIC SMALL J\n          i: window.math.i //\n\n        };\n        const symbol = typeof mathJson === 'string' ? mathJson : mathJson.sym;\n\n        if (BUILT_IN_CONSTANTS[symbol]) {\n          result = new window.math.expression.node.ConstantNode(BUILT_IN_CONSTANTS[symbol]);\n        }\n\n        result = applySuperscriptAsPower(result, mathJson, config);\n      } else if (mathJson.op !== undefined) {\n        if (mathJson.lhs !== undefined && mathJson.rhs !== undefined) {\n          const OPERATOR_FUNCTIONS = {\n            '+': 'add',\n            '-': 'subtract',\n            '*': 'multiply',\n            '/': 'divide',\n            // '.*': 'dotMultiply',\n            // './': 'dotDivide',\n            '%': 'mod',\n            mod: 'mod'\n          };\n          const args = [mathJsonToMathjs(mathJson.lhs, config), mathJsonToMathjs(mathJson.rhs, config)];\n          result = new window.math.expression.node.OperatorNode(mathJson.op, OPERATOR_FUNCTIONS[mathJson.op], args);\n        } else if (mathJson.rhs !== undefined) {\n          const UNARY_OPERATOR_FUNCTIONS = {\n            '-': 'unaryMinus',\n            '+': 'unaryPlus' // '~': 'bitNot',\n            // 'not': 'not'\n\n          };\n          result = new window.math.expression.node.OperatorNode(mathJson.op, UNARY_OPERATOR_FUNCTIONS[mathJson.op], [mathJsonToMathjs(mathJson.rhs, config)]);\n        }\n      } else if (mathJson.fn) {\n        if (mathJson.fn === 'log' || mathJson.fn === 'ln' && mathJson.fn.sub !== undefined) {\n          result = new window.math.expression.node.FunctionNode('log', getMathjsArgsWithSub(mathJson, config));\n        } else if (mathJson.fn === 'lb') {\n          const args = getMathjsArgs(mathJson, config);\n          args.push(new window.math.expression.node.ConstantNode(window.math.bignumber(2)));\n          result = new window.math.expression.node.FunctionNode('log', args);\n        } else if (mathJson.fn === 'lg') {\n          result = new window.math.expression.node.FunctionNode(new window.math.expression.node.SymbolNode('log10'), getMathjsArgs(mathJson, config));\n        } else {\n          const fnName = {\n            '+': 'add',\n            '-': 'subtract',\n            '*': 'multiply',\n            '/': 'divide',\n            randomReal: 'random',\n            randomInteger: 'randomInt',\n            Gamma: 'gamma',\n            Re: 're',\n            Im: 'im',\n            binom: 'composition',\n            ucorner: 'ceil',\n            lcorner: 'floor',\n            arccos: 'acos',\n            arcsin: 'asin',\n            arctan: 'atan',\n            arcosh: 'acosh',\n            arsinh: '         asinh'\n          }[mathJson.fn] || mathJson.fn;\n          result = new window.math.expression.node.FunctionNode(fnName, getMathjsArgs(mathJson, config));\n        }\n      } else if (mathJson.group) {\n        result = applySuperscriptAsPower(mathJsonToMathjs(mathJson.group, config), mathJson, config);\n      }\n\n      return result;\n    }\n  }\n\n  render() {\n    const {\n      count\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }\n    }, \"Use Math editor for calculation \"), count.length > 0 && count !== 0 ? count.slice(0, 4).map((count, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"wrap-set\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }\n    }, \"Step:\\xA0\", parseInt(`${index}`) + 1), /*#__PURE__*/React.createElement(\"span\", {\n      className: 'fieldwrap',\n      ref: this.targetRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 10\n      }\n    }), parseInt(index) + 1 === 4 ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleDelete(index),\n      className: 'editor-plus btn btn-primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 41\n      }\n    }, \"-\") : parseInt(index) + 1 === 1 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addQuestion,\n      className: 'editor-plus btn btn-primary',\n      ref: this.addRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 41\n      }\n    }, \"+\"), \" \") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleDelete(index),\n      className: 'editor-plus sub btn btn-primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }\n    }, \"-\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addQuestion,\n      className: 'editor-plus btn btn-primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 10\n      }\n    }, \"+\"), \" \"))) : null, /*#__PURE__*/React.createElement(\"pre\", {\n      id: \"output\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 10\n      }\n    })));\n  }\n\n}\n\nexport default MultiMath;","map":{"version":3,"sources":["D:/Madhu/approach/src/components/explore.jsx"],"names":["React","Component","MathFieldComponent","MathLive","MultiMath","constructor","addQuestion","counter","state","count","concat","setState","add","handleDelete","i","e","preventDefault","newarr","slice","targetRef","createRef","q1","q2","componentDidMount","target","current","console","log","targete","makeMathField","virtualKeyboardMode","virtualKeyboards","onContentDidChange","ast","latexToAST","$text","fn","arg","length","map","index","args","num","document","getElementById","innerHTML","JSON","stringify","mathJsonToMathjs","eval","applySuperscriptAsPower","mjs","mathJson","config","result","sup","undefined","window","math","expression","node","FunctionNode","getMathjsArgs","Array","isArray","push","getMathjsArgsWithSub","sub","n","number","bignumber","ConstantNode","sym","BUILT_IN_CONSTANTS","Ï€","pi","Ï„","tau","â„¯","â…‡","Ï•","phi","â…ˆ","â…‰","symbol","op","lhs","rhs","OPERATOR_FUNCTIONS","mod","OperatorNode","UNARY_OPERATOR_FUNCTIONS","SymbolNode","fnName","randomReal","randomInteger","Gamma","Re","Im","binom","ucorner","lcorner","arccos","arcsin","arctan","arcosh","arsinh","group","render","parseInt","addRef"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { MathFieldComponent } from 'react-mathlive';\r\nimport MathLive from 'mathlive';\r\n\r\n\r\nclass MultiMath extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.targetRef = React.createRef();\r\n        this.state={\r\n            count: [1],\r\n            add: false,\r\n            q1:135,\r\n            q2:225\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentDidMount(){\r\n     \r\n        const target =  this.targetRef.current;\r\n\r\n        console.log('target', target);\r\n     \r\n        if (target) {\r\n            const targete =  MathLive.makeMathField(target, {\r\n            \r\n                virtualKeyboardMode: 'onfocus',\r\n                virtualKeyboards: 'all',\r\n                onContentDidChange: (target) => {\r\n                    try {\r\n                        const ast = MathLive.latexToAST(targete.$text());\r\n\r\n                        console.log('ast', ast)\r\n\r\n                        console.log('ast', ast.fn)\r\n                        ast.arg.length > 0 && ast.arg ? ast.arg.map((arg, index) => args.num ) : null\r\n                        \r\n\r\n                        \r\n                       \r\n                        document.getElementById(\r\n                            'output'\r\n                        ).innerHTML = JSON.stringify(\r\n                            mathJsonToMathjs(ast, {}).eval()\r\n                        );\r\n                        // document.getElementById('output').innerHTML = JSON.stringify(ast);\r\n                    } catch (e) {\r\n                        document.getElementById('output').innerHTML = 'ðŸ˜•';\r\n                    }\r\n                },\r\n            })\r\n    \r\n      }\r\n      function applySuperscriptAsPower(mjs, mathJson, config) {\r\n        let result = mjs;\r\n        if (\r\n            typeof mathJson === 'object' &&\r\n            mathJson.sup !== undefined\r\n        ) {\r\n            result = new window.math.expression.node.FunctionNode(\r\n                'pow',\r\n                [result, mathJsonToMathjs(mathJson.sup, config)]\r\n            );\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    function getMathjsArgs(mathJson, config) {\r\n        let result = [];\r\n        if (Array.isArray(mathJson.arg)) {\r\n            for (\r\n                let index = 0;\r\n                index < mathJson.arg.length;\r\n                index++\r\n            ) {\r\n                result.push(\r\n                    mathJsonToMathjs(mathJson.arg[index], config)\r\n                );\r\n            }\r\n        } else {\r\n            result = [mathJsonToMathjs(mathJson.arg, config)];\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n * Return an array of arguments, with the sub if present as the last argument.\r\n */\r\nfunction getMathjsArgsWithSub(mathJson, config) {\r\n    const result = getMathjsArgs(mathJson, config);\r\n    if (mathJson.sub !== undefined) {\r\n        result.push(mathJsonToMathjs(mathJson.sub, config));\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Return a mathjs node tree corresponding to the MathjSON object\r\n * @param {Object.<string,any>} mathJson\r\n */\r\nfunction mathJsonToMathjs(mathJson, config) {\r\n    let result;\r\n    if (mathJson === undefined) return undefined;\r\n\r\n    if (\r\n        typeof mathJson === 'number' ||\r\n        mathJson.num !== undefined\r\n    ) {\r\n        let n =\r\n            typeof mathJson === 'number'\r\n                ? mathJson\r\n                : mathJson.num;\r\n\r\n        // Convert to BigNum if required\r\n        if (config.number === 'BigNumber')\r\n            n = window.math.bignumber(n);\r\n\r\n        result = new window.math.expression.node.ConstantNode(\r\n            n\r\n        );\r\n\r\n        // Apply the superscript as an operation\r\n        result = applySuperscriptAsPower(\r\n            result,\r\n            mathJson,\r\n            config\r\n        );\r\n    } else if (\r\n        typeof mathJson === 'string' ||\r\n        mathJson.sym !== undefined\r\n    ) {\r\n        const BUILT_IN_CONSTANTS = {\r\n            Ï€: window.math.pi,\r\n            Ï„: window.math.tau, // GREEK SMALL LETTER TAU\r\n            â„¯: window.math.e, // â„¯ SCRIPT SMALL E\r\n            â…‡: window.math.e, // â…‡ DOUBLE-STRUCK ITALIC SMALL E\r\n            e: window.math.e,\r\n            Ï•: window.math.phi, //  GREEK SMALL LETTER PHI\r\n            â…ˆ: window.math.i, // â…ˆ DOUBLE-STRUCK ITALIC SMALL I\r\n            â…‰: window.math.i, // â…‰ DOUBLE-STRUCK ITALIC SMALL J\r\n            i: window.math.i, //\r\n        };\r\n        const symbol =\r\n            typeof mathJson === 'string'\r\n                ? mathJson\r\n                : mathJson.sym;\r\n        if (BUILT_IN_CONSTANTS[symbol]) {\r\n            result = new window.math.expression.node.ConstantNode(\r\n                BUILT_IN_CONSTANTS[symbol]\r\n            );\r\n        } \r\n        result = applySuperscriptAsPower(\r\n            result,\r\n            mathJson,\r\n            config\r\n        );\r\n    } else if (mathJson.op !== undefined) {\r\n        if (\r\n            mathJson.lhs !== undefined &&\r\n            mathJson.rhs !== undefined\r\n        ) {\r\n            const OPERATOR_FUNCTIONS = {\r\n                '+': 'add',\r\n                '-': 'subtract',\r\n                '*': 'multiply',\r\n                '/': 'divide',\r\n                // '.*': 'dotMultiply',\r\n                // './': 'dotDivide',\r\n                '%': 'mod',\r\n                mod: 'mod',\r\n            };\r\n            const args = [\r\n                mathJsonToMathjs(mathJson.lhs, config),\r\n                mathJsonToMathjs(mathJson.rhs, config),\r\n            ];\r\n            result = new window.math.expression.node.OperatorNode(\r\n                mathJson.op,\r\n                OPERATOR_FUNCTIONS[mathJson.op],\r\n                args\r\n            );\r\n        } else if (mathJson.rhs !== undefined) {\r\n            const UNARY_OPERATOR_FUNCTIONS = {\r\n                '-': 'unaryMinus',\r\n                '+': 'unaryPlus',\r\n                // '~': 'bitNot',\r\n                // 'not': 'not'\r\n            };\r\n            result = new window.math.expression.node.OperatorNode(\r\n                mathJson.op,\r\n                UNARY_OPERATOR_FUNCTIONS[mathJson.op],\r\n                [mathJsonToMathjs(mathJson.rhs, config)]\r\n            );\r\n        }\r\n    } else if (mathJson.fn) {\r\n        if (\r\n            mathJson.fn === 'log' ||\r\n            (mathJson.fn === 'ln' &&\r\n                mathJson.fn.sub !== undefined)\r\n        ) {\r\n            result = new window.math.expression.node.FunctionNode(\r\n                'log',\r\n                getMathjsArgsWithSub(mathJson, config)\r\n            );\r\n        } else if (mathJson.fn === 'lb') {\r\n            const args = getMathjsArgs(mathJson, config);\r\n            args.push(\r\n                new window.math.expression.node.ConstantNode(\r\n                    window.math.bignumber(2)\r\n                )\r\n            );\r\n            result = new window.math.expression.node.FunctionNode(\r\n                'log',\r\n                args\r\n            );\r\n        } else if (mathJson.fn === 'lg') {\r\n            result = new window.math.expression.node.FunctionNode(\r\n                new window.math.expression.node.SymbolNode(\r\n                    'log10'\r\n                ),\r\n                getMathjsArgs(mathJson, config)\r\n            );\r\n        } else {\r\n            const fnName =\r\n                {\r\n                    '+': 'add',\r\n                    '-': 'subtract',\r\n                    '*': 'multiply',\r\n                    '/': 'divide',\r\n                    randomReal: 'random',\r\n                    randomInteger: 'randomInt',\r\n                    Gamma: 'gamma',\r\n                    Re: 're',\r\n                    Im: 'im',\r\n                    binom: 'composition',\r\n                    ucorner: 'ceil',\r\n                    lcorner: 'floor',\r\n                    arccos: 'acos',\r\n                    arcsin: 'asin',\r\n                    arctan: 'atan',\r\n                    arcosh: 'acosh',\r\n                    arsinh: '         asinh',\r\n                }[mathJson.fn] || mathJson.fn;\r\n\r\n            result = new window.math.expression.node.FunctionNode(\r\n                fnName,\r\n                getMathjsArgs(mathJson, config)\r\n            );\r\n        }\r\n    } else if (mathJson.group) {\r\n        result = applySuperscriptAsPower(\r\n            mathJsonToMathjs(mathJson.group, config),\r\n            mathJson,\r\n            config\r\n        );\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n    \r\n\r\n    addQuestion = () =>{\r\n        let counter = this.state.count.concat([''])\r\n        this.setState({\r\n            count: counter,\r\n            add: (!this.state.add)\r\n        })\r\n       \r\n        \r\n    }\r\n\r\n     handleDelete = i => e => {\r\n        e.preventDefault()\r\n        let newarr = [\r\n          ...this.state.count.slice(0, i),\r\n          ...this.state.count.slice(i + 1)\r\n        ]\r\n        this.setState({\r\n             count: newarr\r\n        })\r\n      }\r\n\r\n    render(){\r\n         const { count } = this.state\r\n         \r\n        return(\r\n            <div>\r\n          \r\n      <div className=\"App\">\r\n          <p>Use Math editor for calculation </p>\r\n      { count.length > 0 && count !== 0 ? (count.slice(0, 4).map((count, index ) => (\r\n        \r\n          <div key={index} className=\"wrap-set\">\r\n        <p>Step:&nbsp;{parseInt(`${index}`) + 1}</p> \r\n         <span className={'fieldwrap'} ref= {this.targetRef} ></span>  \r\n         \r\n         {parseInt(index) + 1 ===  4 ?  <button onClick={this.handleDelete(index)} className={'editor-plus btn btn-primary'}>-</button>  :\r\n\r\n        parseInt(index) + 1 ===  1 ?  <><button onClick={this.addQuestion} className={'editor-plus btn btn-primary'} ref={this.addRef}>+</button> </>: \r\n          <><button onClick={this.handleDelete(index)} className={'editor-plus sub btn btn-primary'}>-</button>\r\n         <button onClick={this.addQuestion} className={'editor-plus btn btn-primary'}>+</button> </> }\r\n          </div>\r\n        ))  ) : null }\r\n     \r\n         <pre id=\"output\"></pre>\r\n\r\n      </div> \r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n     \r\n}\r\nexport default MultiMath;"]},"metadata":{},"sourceType":"module"}