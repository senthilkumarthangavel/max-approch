{"ast":null,"code":"var _jsxFileName = \"D:\\\\Madhu\\\\approach\\\\src\\\\components\\\\explore.jsx\";\nimport React from 'react';\nimport { MathFieldComponent } from 'react-mathlive';\nimport MathLive from 'mathlive';\nimport { useState, useEffect, useRef } from 'react';\n\nfunction MultiMath() {\n  const [value, setValue] = useState(\"\");\n  const targetRef = useRef();\n  useEffect(() => {\n    if (targetRef) {\n      console.log('targetRef', targetRef);\n      const mathField = MathLive.makeMathField(targetRef.current);\n      console.log('mathField', mathField);\n      mathField.$setConfig({\n        virtualKeyboardMode: 'onfocus',\n        virtualKeyboards: 'all',\n        onContentDidChange: mathfield => {\n          try {\n            const ast = MathLive.latexToAST(mathfield.$text());\n            document.getElementById('output').innerHTML = JSON.stringify(mathJsonToMathjs(ast, {}).eval()); // document.getElementById('output').innerHTML = JSON.stringify(ast);\n          } catch (e) {\n            document.getElementById('output').innerHTML = 'ðŸ˜•';\n          }\n        }\n      });\n    }\n  }, [targetRef]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: targetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, \"y=x\"), /*#__PURE__*/React.createElement(\"pre\", {\n    id: \"output\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 10\n    }\n  })));\n}\n\nfunction applySuperscriptAsPower(mjs, mathJson, config) {\n  let result = mjs;\n\n  if (typeof mathJson === 'object' && mathJson.sup !== undefined) {\n    result = new window.math.expression.node.FunctionNode('pow', [result, mathJsonToMathjs(mathJson.sup, config)]);\n  }\n\n  return result;\n}\n\nfunction getMathjsArgs(mathJson, config) {\n  let result = [];\n\n  if (Array.isArray(mathJson.arg)) {\n    for (let index = 0; index < mathJson.arg.length; index++) {\n      result.push(mathJsonToMathjs(mathJson.arg[index], config));\n    }\n  } else {\n    result = [mathJsonToMathjs(mathJson.arg, config)];\n  }\n\n  return result;\n}\n/**\r\n * Return an array of arguments, with the sub if present as the last argument.\r\n */\n\n\nfunction getMathjsArgsWithSub(mathJson, config) {\n  const result = getMathjsArgs(mathJson, config);\n\n  if (mathJson.sub !== undefined) {\n    result.push(mathJsonToMathjs(mathJson.sub, config));\n  }\n\n  return result;\n}\n/**\r\n * Return a mathjs node tree corresponding to the MathjSON object\r\n * @param {Object.<string,any>} mathJson\r\n */\n\n\nfunction mathJsonToMathjs(mathJson, config) {\n  let result;\n  if (mathJson === undefined) return undefined;\n\n  if (typeof mathJson === 'number' || mathJson.num !== undefined) {\n    let n = typeof mathJson === 'number' ? mathJson : mathJson.num; // Convert to BigNum if required\n\n    if (config.number === 'BigNumber') n = window.math.bignumber(n);\n    result = new window.math.expression.node.ConstantNode(n); // Apply the superscript as an operation\n\n    result = applySuperscriptAsPower(result, mathJson, config);\n  } else if (typeof mathJson === 'string' || mathJson.sym !== undefined) {\n    const BUILT_IN_CONSTANTS = {\n      Ï€: window.math.pi,\n      Ï„: window.math.tau,\n      // GREEK SMALL LETTER TAU\n      â„¯: window.math.e,\n      // â„¯ SCRIPT SMALL E\n      â…‡: window.math.e,\n      // â…‡ DOUBLE-STRUCK ITALIC SMALL E\n      e: window.math.e,\n      Ï•: window.math.phi,\n      //  GREEK SMALL LETTER PHI\n      â…ˆ: window.math.i,\n      // â…ˆ DOUBLE-STRUCK ITALIC SMALL I\n      â…‰: window.math.i,\n      // â…‰ DOUBLE-STRUCK ITALIC SMALL J\n      i: window.math.i //\n\n    };\n    const symbol = typeof mathJson === 'string' ? mathJson : mathJson.sym;\n\n    if (BUILT_IN_CONSTANTS[symbol]) {\n      result = new window.math.expression.node.ConstantNode(BUILT_IN_CONSTANTS[symbol]);\n    }\n\n    result = applySuperscriptAsPower(result, mathJson, config);\n  } else if (mathJson.op !== undefined) {\n    if (mathJson.lhs !== undefined && mathJson.rhs !== undefined) {\n      const OPERATOR_FUNCTIONS = {\n        '+': 'add',\n        '-': 'subtract',\n        '*': 'multiply',\n        '/': 'divide',\n        // '.*': 'dotMultiply',\n        // './': 'dotDivide',\n        '%': 'mod',\n        mod: 'mod'\n      };\n      const args = [mathJsonToMathjs(mathJson.lhs, config), mathJsonToMathjs(mathJson.rhs, config)];\n      result = new window.math.expression.node.OperatorNode(mathJson.op, OPERATOR_FUNCTIONS[mathJson.op], args);\n    } else if (mathJson.rhs !== undefined) {\n      const UNARY_OPERATOR_FUNCTIONS = {\n        '-': 'unaryMinus',\n        '+': 'unaryPlus' // '~': 'bitNot',\n        // 'not': 'not'\n\n      };\n      result = new window.math.expression.node.OperatorNode(mathJson.op, UNARY_OPERATOR_FUNCTIONS[mathJson.op], [mathJsonToMathjs(mathJson.rhs, config)]);\n    }\n  } else if (mathJson.fn) {\n    if (mathJson.fn === 'log' || mathJson.fn === 'ln' && mathJson.fn.sub !== undefined) {\n      result = new window.math.expression.node.FunctionNode('log', getMathjsArgsWithSub(mathJson, config));\n    } else if (mathJson.fn === 'lb') {\n      const args = getMathjsArgs(mathJson, config);\n      args.push(new window.math.expression.node.ConstantNode(window.math.bignumber(2)));\n      result = new window.math.expression.node.FunctionNode('log', args);\n    } else if (mathJson.fn === 'lg') {\n      result = new window.math.expression.node.FunctionNode(new window.math.expression.node.SymbolNode('log10'), getMathjsArgs(mathJson, config));\n    } else {\n      const fnName = {\n        '+': 'add',\n        '-': 'subtract',\n        '*': 'multiply',\n        '/': 'divide',\n        randomReal: 'random',\n        randomInteger: 'randomInt',\n        Gamma: 'gamma',\n        Re: 're',\n        Im: 'im',\n        binom: 'composition',\n        ucorner: 'ceil',\n        lcorner: 'floor',\n        arccos: 'acos',\n        arcsin: 'asin',\n        arctan: 'atan',\n        arcosh: 'acosh',\n        arsinh: '         asinh'\n      }[mathJson.fn] || mathJson.fn;\n      result = new window.math.expression.node.FunctionNode(fnName, getMathjsArgs(mathJson, config));\n    }\n  } else if (mathJson.group) {\n    result = applySuperscriptAsPower(mathJsonToMathjs(mathJson.group, config), mathJson, config);\n  }\n\n  return result;\n}\n\nexport default MultiMath;","map":{"version":3,"sources":["D:/Madhu/approach/src/components/explore.jsx"],"names":["React","MathFieldComponent","MathLive","useState","useEffect","useRef","MultiMath","value","setValue","targetRef","console","log","mathField","makeMathField","current","$setConfig","virtualKeyboardMode","virtualKeyboards","onContentDidChange","mathfield","ast","latexToAST","$text","document","getElementById","innerHTML","JSON","stringify","mathJsonToMathjs","eval","e","applySuperscriptAsPower","mjs","mathJson","config","result","sup","undefined","window","math","expression","node","FunctionNode","getMathjsArgs","Array","isArray","arg","index","length","push","getMathjsArgsWithSub","sub","num","n","number","bignumber","ConstantNode","sym","BUILT_IN_CONSTANTS","Ï€","pi","Ï„","tau","â„¯","â…‡","Ï•","phi","â…ˆ","i","â…‰","symbol","op","lhs","rhs","OPERATOR_FUNCTIONS","mod","args","OperatorNode","UNARY_OPERATOR_FUNCTIONS","fn","SymbolNode","fnName","randomReal","randomInteger","Gamma","Re","Im","binom","ucorner","lcorner","arccos","arcsin","arctan","arcosh","arsinh","group"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { MathFieldComponent } from 'react-mathlive';\r\nimport MathLive from 'mathlive';\r\nimport{ useState, useEffect, useRef } from 'react';\r\n\r\nfunction MultiMath() {\r\n    const [value, setValue] = useState(\"\");\r\n    const targetRef = useRef();\r\n    useEffect(() => {\r\n      if (targetRef) {\r\n          console.log('targetRef', targetRef);\r\n        const mathField = MathLive.makeMathField(targetRef.current);\r\n        console.log('mathField', mathField);\r\n\r\n        mathField.$setConfig({\r\n          virtualKeyboardMode: 'onfocus',\r\n          virtualKeyboards: 'all',\r\n          onContentDidChange: mathfield => {\r\n            try {\r\n                const ast = MathLive.latexToAST(mathfield.$text());\r\n                document.getElementById(\r\n                    'output'\r\n                ).innerHTML = JSON.stringify(\r\n                    mathJsonToMathjs(ast, {}).eval()\r\n                );\r\n                // document.getElementById('output').innerHTML = JSON.stringify(ast);\r\n            } catch (e) {\r\n                document.getElementById('output').innerHTML = 'ðŸ˜•';\r\n            }\r\n          },\r\n        })\r\n      }\r\n    }, [targetRef]);\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div ref={targetRef} >\r\n            y=x\r\n          </div>\r\n         <pre id=\"output\"></pre>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n\r\nfunction applySuperscriptAsPower(mjs, mathJson, config) {\r\n    let result = mjs;\r\n    if (\r\n        typeof mathJson === 'object' &&\r\n        mathJson.sup !== undefined\r\n    ) {\r\n        result = new window.math.expression.node.FunctionNode(\r\n            'pow',\r\n            [result, mathJsonToMathjs(mathJson.sup, config)]\r\n        );\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction getMathjsArgs(mathJson, config) {\r\n    let result = [];\r\n    if (Array.isArray(mathJson.arg)) {\r\n        for (\r\n            let index = 0;\r\n            index < mathJson.arg.length;\r\n            index++\r\n        ) {\r\n            result.push(\r\n                mathJsonToMathjs(mathJson.arg[index], config)\r\n            );\r\n        }\r\n    } else {\r\n        result = [mathJsonToMathjs(mathJson.arg, config)];\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Return an array of arguments, with the sub if present as the last argument.\r\n */\r\nfunction getMathjsArgsWithSub(mathJson, config) {\r\n    const result = getMathjsArgs(mathJson, config);\r\n    if (mathJson.sub !== undefined) {\r\n        result.push(mathJsonToMathjs(mathJson.sub, config));\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Return a mathjs node tree corresponding to the MathjSON object\r\n * @param {Object.<string,any>} mathJson\r\n */\r\nfunction mathJsonToMathjs(mathJson, config) {\r\n    let result;\r\n    if (mathJson === undefined) return undefined;\r\n\r\n    if (\r\n        typeof mathJson === 'number' ||\r\n        mathJson.num !== undefined\r\n    ) {\r\n        let n =\r\n            typeof mathJson === 'number'\r\n                ? mathJson\r\n                : mathJson.num;\r\n\r\n        // Convert to BigNum if required\r\n        if (config.number === 'BigNumber')\r\n            n = window.math.bignumber(n);\r\n\r\n        result = new window.math.expression.node.ConstantNode(\r\n            n\r\n        );\r\n\r\n        // Apply the superscript as an operation\r\n        result = applySuperscriptAsPower(\r\n            result,\r\n            mathJson,\r\n            config\r\n        );\r\n    } else if (\r\n        typeof mathJson === 'string' ||\r\n        mathJson.sym !== undefined\r\n    ) {\r\n        const BUILT_IN_CONSTANTS = {\r\n            Ï€: window.math.pi,\r\n            Ï„: window.math.tau, // GREEK SMALL LETTER TAU\r\n            â„¯: window.math.e, // â„¯ SCRIPT SMALL E\r\n            â…‡: window.math.e, // â…‡ DOUBLE-STRUCK ITALIC SMALL E\r\n            e: window.math.e,\r\n            Ï•: window.math.phi, //  GREEK SMALL LETTER PHI\r\n            â…ˆ: window.math.i, // â…ˆ DOUBLE-STRUCK ITALIC SMALL I\r\n            â…‰: window.math.i, // â…‰ DOUBLE-STRUCK ITALIC SMALL J\r\n            i: window.math.i, //\r\n        };\r\n        const symbol =\r\n            typeof mathJson === 'string'\r\n                ? mathJson\r\n                : mathJson.sym;\r\n        if (BUILT_IN_CONSTANTS[symbol]) {\r\n            result = new window.math.expression.node.ConstantNode(\r\n                BUILT_IN_CONSTANTS[symbol]\r\n            );\r\n        } \r\n        result = applySuperscriptAsPower(\r\n            result,\r\n            mathJson,\r\n            config\r\n        );\r\n    } else if (mathJson.op !== undefined) {\r\n        if (\r\n            mathJson.lhs !== undefined &&\r\n            mathJson.rhs !== undefined\r\n        ) {\r\n            const OPERATOR_FUNCTIONS = {\r\n                '+': 'add',\r\n                '-': 'subtract',\r\n                '*': 'multiply',\r\n                '/': 'divide',\r\n                // '.*': 'dotMultiply',\r\n                // './': 'dotDivide',\r\n                '%': 'mod',\r\n                mod: 'mod',\r\n            };\r\n            const args = [\r\n                mathJsonToMathjs(mathJson.lhs, config),\r\n                mathJsonToMathjs(mathJson.rhs, config),\r\n            ];\r\n            result = new window.math.expression.node.OperatorNode(\r\n                mathJson.op,\r\n                OPERATOR_FUNCTIONS[mathJson.op],\r\n                args\r\n            );\r\n        } else if (mathJson.rhs !== undefined) {\r\n            const UNARY_OPERATOR_FUNCTIONS = {\r\n                '-': 'unaryMinus',\r\n                '+': 'unaryPlus',\r\n                // '~': 'bitNot',\r\n                // 'not': 'not'\r\n            };\r\n            result = new window.math.expression.node.OperatorNode(\r\n                mathJson.op,\r\n                UNARY_OPERATOR_FUNCTIONS[mathJson.op],\r\n                [mathJsonToMathjs(mathJson.rhs, config)]\r\n            );\r\n        }\r\n    } else if (mathJson.fn) {\r\n        if (\r\n            mathJson.fn === 'log' ||\r\n            (mathJson.fn === 'ln' &&\r\n                mathJson.fn.sub !== undefined)\r\n        ) {\r\n            result = new window.math.expression.node.FunctionNode(\r\n                'log',\r\n                getMathjsArgsWithSub(mathJson, config)\r\n            );\r\n        } else if (mathJson.fn === 'lb') {\r\n            const args = getMathjsArgs(mathJson, config);\r\n            args.push(\r\n                new window.math.expression.node.ConstantNode(\r\n                    window.math.bignumber(2)\r\n                )\r\n            );\r\n            result = new window.math.expression.node.FunctionNode(\r\n                'log',\r\n                args\r\n            );\r\n        } else if (mathJson.fn === 'lg') {\r\n            result = new window.math.expression.node.FunctionNode(\r\n                new window.math.expression.node.SymbolNode(\r\n                    'log10'\r\n                ),\r\n                getMathjsArgs(mathJson, config)\r\n            );\r\n        } else {\r\n            const fnName =\r\n                {\r\n                    '+': 'add',\r\n                    '-': 'subtract',\r\n                    '*': 'multiply',\r\n                    '/': 'divide',\r\n                    randomReal: 'random',\r\n                    randomInteger: 'randomInt',\r\n                    Gamma: 'gamma',\r\n                    Re: 're',\r\n                    Im: 'im',\r\n                    binom: 'composition',\r\n                    ucorner: 'ceil',\r\n                    lcorner: 'floor',\r\n                    arccos: 'acos',\r\n                    arcsin: 'asin',\r\n                    arctan: 'atan',\r\n                    arcosh: 'acosh',\r\n                    arsinh: '         asinh',\r\n                }[mathJson.fn] || mathJson.fn;\r\n\r\n            result = new window.math.expression.node.FunctionNode(\r\n                fnName,\r\n                getMathjsArgs(mathJson, config)\r\n            );\r\n        }\r\n    } else if (mathJson.group) {\r\n        result = applySuperscriptAsPower(\r\n            mathJsonToMathjs(mathJson.group, config),\r\n            mathJson,\r\n            config\r\n        );\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport default MultiMath;"]},"metadata":{},"sourceType":"module"}