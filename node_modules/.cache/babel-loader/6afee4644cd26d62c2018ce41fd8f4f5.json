{"ast":null,"code":"var _jsxFileName = \"H:\\\\Project\\\\Technoduce\\\\madhu\\\\approach\\\\approach\\\\src\\\\components\\\\explore.jsx\";\nimport React, { Component } from 'react';\nimport { MathFieldComponent } from 'react-mathlive';\nimport MathLive from 'mathlive';\nimport { validate, getResultObject } from './explore/hcf/validation';\n\nclass MultiMath extends Component {\n  constructor() {\n    super();\n\n    this.addQuestion = e => {\n      this.staticCalc(this.state.q1, this.state.q2);\n      const enterValue = this.ast; //this.validation(enterValue) ? console.log('test') : console.log('test1')\n      //console.log('quotient', quotient);\n      //console.log('remainder', remainder);\n      // const operand_one = enterValue.fn;\n      // const q1_num_arr = enterValue.arg\n      // const q1_num = enterValue.arg[0].num;\n      // const q2_num = enterValue.arg[1].arg[0].arg[0].num;\n      //const q3_num = enterValue.arg[1].arg[0].arg[1].num;\n      //const operand_two = enterValue.arg[1].arg[0].fn;\n      // const  operand_three = enterValue.arg[1].fn;\n      //console.log('enterValue', enterValue);\n      // console.log('q1_num_arr', q1_num_arr);\n      //console.log('q1_num', q1_num);\n      // console.log('q2_num', q2_num);\n      //console.log('q3_num', q3_num);\n      // console.log('operand_one', operand_one);\n      //  console.log('operand_two', operand_two);\n      // console.log('operand_three', operand_three);\n\n      let counter = this.state.count.concat(['']); // this.setState({\n      //     count: counter,\n      //     add: (!this.state.add)\n      // })\n    };\n\n    this.handleDelete = i => e => {\n      e.preventDefault();\n      let newarr = [...this.state.count.slice(0, i), ...this.state.count.slice(i + 1)];\n      this.setState({\n        count: newarr\n      });\n    };\n\n    this.ast = undefined;\n    this.get_index = undefined;\n    this.targetRef = React.createRef();\n    this.state = {\n      count: [1],\n      add: false,\n      q1: 135,\n      q2: 225,\n      quotient: '',\n      set_one: {},\n      ast_fn: '',\n      data: {}\n    };\n  }\n\n  componentDidUpdate() {\n    const target = this.targetRef.current;\n    const value_index = target.getAttribute('data-value'); //index value\n\n    this.get_index = value_index; //console.log('value_index', value_index)                 //index value\n\n    if (target) {\n      console.log('target', target);\n      const mathField = MathLive.makeMathField(target);\n      console.log('mathField', mathField);\n      mathField.$setConfig({\n        virtualKeyboardMode: 'onfocus',\n        virtualKeyboards: 'all',\n        onBlur: mathfield => {\n          try {\n            const ast = MathLive.latexToAST(mathfield.$text());\n            this.ast = ast; //validate HCF\n\n            let valid = validate(ast, this.get_index, this.state);\n            console.log(\"valid \", valid); //valid => true dont hide + and green in textbox \n            //valid => otherwise hide +, red in textbox and show error message under textbox\n\n            if (valid === true) {\n              let data = getResultObject(ast, this.get_index, this.state);\n              this.setState({\n                data\n              });\n            } else {}\n\n            document.getElementById('output').innerHTML = JSON.stringify(mathJsonToMathjs(ast, {}).eval()); // document.getElementById('output').innerHTML = JSON.stringify(ast);\n          } catch (e) {\n            document.getElementById('output').innerHTML = 'ðŸ˜•';\n          }\n        }\n      });\n    }\n\n    function applySuperscriptAsPower(mjs, mathJson, config) {\n      let result = mjs;\n\n      if (typeof mathJson === 'object' && mathJson.sup !== undefined) {\n        result = new window.math.expression.node.FunctionNode('pow', [result, mathJsonToMathjs(mathJson.sup, config)]);\n      }\n\n      return result;\n    }\n\n    function getMathjsArgs(mathJson, config) {\n      let result = [];\n\n      if (Array.isArray(mathJson.arg)) {\n        for (let index = 0; index < mathJson.arg.length; index++) {\n          result.push(mathJsonToMathjs(mathJson.arg[index], config));\n        }\n      } else {\n        result = [mathJsonToMathjs(mathJson.arg, config)];\n      }\n\n      return result;\n    }\n    /**\r\n     * Return an array of arguments, with the sub if present as the last argument.\r\n     */\n\n\n    function getMathjsArgsWithSub(mathJson, config) {\n      const result = getMathjsArgs(mathJson, config);\n\n      if (mathJson.sub !== undefined) {\n        result.push(mathJsonToMathjs(mathJson.sub, config));\n      }\n\n      return result;\n    }\n    /**\r\n     * Return a mathjs node tree corresponding to the MathjSON object\r\n     * @param {Object.<string,any>} mathJson\r\n     */\n\n\n    function mathJsonToMathjs(mathJson, config) {\n      let result;\n      if (mathJson === undefined) return undefined;\n\n      if (typeof mathJson === 'number' || mathJson.num !== undefined) {\n        let n = typeof mathJson === 'number' ? mathJson : mathJson.num; // Convert to BigNum if required\n\n        if (config.number === 'BigNumber') n = window.math.bignumber(n);\n        result = new window.math.expression.node.ConstantNode(n); // Apply the superscript as an operation\n\n        result = applySuperscriptAsPower(result, mathJson, config);\n      } else if (typeof mathJson === 'string' || mathJson.sym !== undefined) {\n        const BUILT_IN_CONSTANTS = {\n          Ï€: window.math.pi,\n          Ï„: window.math.tau,\n          // GREEK SMALL LETTER TAU\n          â„¯: window.math.e,\n          // â„¯ SCRIPT SMALL E\n          â…‡: window.math.e,\n          // â…‡ DOUBLE-STRUCK ITALIC SMALL E\n          e: window.math.e,\n          Ï•: window.math.phi,\n          //  GREEK SMALL LETTER PHI\n          â…ˆ: window.math.i,\n          // â…ˆ DOUBLE-STRUCK ITALIC SMALL I\n          â…‰: window.math.i,\n          // â…‰ DOUBLE-STRUCK ITALIC SMALL J\n          i: window.math.i //\n\n        };\n        const symbol = typeof mathJson === 'string' ? mathJson : mathJson.sym;\n\n        if (BUILT_IN_CONSTANTS[symbol]) {\n          result = new window.math.expression.node.ConstantNode(BUILT_IN_CONSTANTS[symbol]);\n        }\n\n        result = applySuperscriptAsPower(result, mathJson, config);\n      } else if (mathJson.op !== undefined) {\n        if (mathJson.lhs !== undefined && mathJson.rhs !== undefined) {\n          const OPERATOR_FUNCTIONS = {\n            '+': 'add',\n            '-': 'subtract',\n            '*': 'multiply',\n            '/': 'divide',\n            // '.*': 'dotMultiply',\n            // './': 'dotDivide',\n            '%': 'mod',\n            mod: 'mod'\n          };\n          const args = [mathJsonToMathjs(mathJson.lhs, config), mathJsonToMathjs(mathJson.rhs, config)];\n          result = new window.math.expression.node.OperatorNode(mathJson.op, OPERATOR_FUNCTIONS[mathJson.op], args);\n        } else if (mathJson.rhs !== undefined) {\n          const UNARY_OPERATOR_FUNCTIONS = {\n            '-': 'unaryMinus',\n            '+': 'unaryPlus' // '~': 'bitNot',\n            // 'not': 'not'\n\n          };\n          result = new window.math.expression.node.OperatorNode(mathJson.op, UNARY_OPERATOR_FUNCTIONS[mathJson.op], [mathJsonToMathjs(mathJson.rhs, config)]);\n        }\n      } else if (mathJson.fn) {\n        if (mathJson.fn === 'log' || mathJson.fn === 'ln' && mathJson.fn.sub !== undefined) {\n          result = new window.math.expression.node.FunctionNode('log', getMathjsArgsWithSub(mathJson, config));\n        } else if (mathJson.fn === 'lb') {\n          const args = getMathjsArgs(mathJson, config);\n          args.push(new window.math.expression.node.ConstantNode(window.math.bignumber(2)));\n          result = new window.math.expression.node.FunctionNode('log', args);\n        } else if (mathJson.fn === 'lg') {\n          result = new window.math.expression.node.FunctionNode(new window.math.expression.node.SymbolNode('log10'), getMathjsArgs(mathJson, config));\n        } else {\n          const fnName = {\n            '+': 'add',\n            '-': 'subtract',\n            '*': 'multiply',\n            '/': 'divide',\n            randomReal: 'random',\n            randomInteger: 'randomInt',\n            Gamma: 'gamma',\n            Re: 're',\n            Im: 'im',\n            binom: 'composition',\n            ucorner: 'ceil',\n            lcorner: 'floor',\n            arccos: 'acos',\n            arcsin: 'asin',\n            arctan: 'atan',\n            arcosh: 'acosh',\n            arsinh: 'asinh'\n          }[mathJson.fn] || mathJson.fn;\n          result = new window.math.expression.node.FunctionNode(fnName, getMathjsArgs(mathJson, config));\n        }\n      } else if (mathJson.group) {\n        result = applySuperscriptAsPower(mathJsonToMathjs(mathJson.group, config), mathJson, config);\n      }\n\n      return result;\n    }\n  }\n\n  staticCalc(q1, q2) {\n    let quotient_num, remainder_num;\n\n    if (q2 > q1) {\n      quotient_num = Math.floor(q2 / q1);\n      remainder_num = Math.floor(q2 % q1);\n    } // this.setState({\n    //     quotient: quotient_num\n    // })\n    //console.log('quo', this.state.quotient)\n\n  }\n\n  validation(enterValue) {\n    let get_index = this.get_index;\n\n    if (get_index === 1) {\n      enterValue.arg[0].num = this.state.q2;\n    }\n\n    return false;\n  }\n\n  render() {\n    const {\n      count\n    } = this.state;\n    console.log(\"this.state \", this.state);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 21\n      }\n    }, \"Use Math editor for calculation \"), count.length > 0 && count !== 0 ? count.slice(0, 4).map((count, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"wrap-set\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 29\n      }\n    }, \"Step:\\xA0\", parseInt(`${index}`) + 1), /*#__PURE__*/React.createElement(\"span\", {\n      className: 'fieldwrap',\n      ref: this.targetRef,\n      \"data-value\": index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 29\n      }\n    }), parseInt(index) + 1 === 1 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addQuestion,\n      className: 'editor-plus btn btn-primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 35\n      }\n    }, \"+\"), \" \") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleDelete(index),\n      className: 'editor-plus sub btn btn-primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 35\n      }\n    }, \"-\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.addQuestion,\n      className: 'editor-plus btn btn-primary',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 37\n      }\n    }, \"+\"), \" \"))) : null, /*#__PURE__*/React.createElement(\"pre\", {\n      id: \"output\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default MultiMath;","map":{"version":3,"sources":["H:/Project/Technoduce/madhu/approach/approach/src/components/explore.jsx"],"names":["React","Component","MathFieldComponent","MathLive","validate","getResultObject","MultiMath","constructor","addQuestion","e","staticCalc","state","q1","q2","enterValue","ast","counter","count","concat","handleDelete","i","preventDefault","newarr","slice","setState","undefined","get_index","targetRef","createRef","add","quotient","set_one","ast_fn","data","componentDidUpdate","target","current","value_index","getAttribute","console","log","mathField","makeMathField","$setConfig","virtualKeyboardMode","virtualKeyboards","onBlur","mathfield","latexToAST","$text","valid","document","getElementById","innerHTML","JSON","stringify","mathJsonToMathjs","eval","applySuperscriptAsPower","mjs","mathJson","config","result","sup","window","math","expression","node","FunctionNode","getMathjsArgs","Array","isArray","arg","index","length","push","getMathjsArgsWithSub","sub","num","n","number","bignumber","ConstantNode","sym","BUILT_IN_CONSTANTS","Ï€","pi","Ï„","tau","â„¯","â…‡","Ï•","phi","â…ˆ","â…‰","symbol","op","lhs","rhs","OPERATOR_FUNCTIONS","mod","args","OperatorNode","UNARY_OPERATOR_FUNCTIONS","fn","SymbolNode","fnName","randomReal","randomInteger","Gamma","Re","Im","binom","ucorner","lcorner","arccos","arcsin","arctan","arcosh","arsinh","group","quotient_num","remainder_num","Math","floor","validation","render","map","parseInt"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { MathFieldComponent } from 'react-mathlive';\r\nimport MathLive from 'mathlive';\r\nimport { validate, getResultObject } from './explore/hcf/validation';\r\n\r\nclass MultiMath extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.ast = undefined;\r\n        this.get_index = undefined;\r\n        this.targetRef = React.createRef();\r\n        this.state = {\r\n            count: [1],\r\n            add: false,\r\n            q1: 135,\r\n            q2: 225,\r\n            quotient: '',\r\n            set_one: {},\r\n            ast_fn: '',\r\n            data: {}\r\n\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        const target = this.targetRef.current;\r\n\r\n        const value_index = target.getAttribute('data-value');  //index value\r\n        this.get_index = value_index;\r\n        //console.log('value_index', value_index)                 //index value\r\n\r\n        if (target) {\r\n            console.log('target', target);\r\n            const mathField = MathLive.makeMathField(target);\r\n            console.log('mathField', mathField);\r\n\r\n            mathField.$setConfig({\r\n                virtualKeyboardMode: 'onfocus',\r\n                virtualKeyboards: 'all',\r\n                onBlur: mathfield => {\r\n                    try {\r\n                        const ast = MathLive.latexToAST(mathfield.$text());\r\n                        this.ast = ast;\r\n                        \r\n                        //validate HCF\r\n                        let valid = validate(ast, this.get_index, this.state);\r\n                        \r\n                        console.log(\"valid \", valid);\r\n                        //valid => true dont hide + and green in textbox \r\n                        //valid => otherwise hide +, red in textbox and show error message under textbox\r\n                        if (valid === true) { \r\n\r\n                            let data = getResultObject(ast, this.get_index, this.state);\r\n                            this.setState({data});\r\n                        } else {\r\n\r\n                        }\r\n\r\n                        document.getElementById(\r\n                            'output'\r\n                        ).innerHTML = JSON.stringify(\r\n                            mathJsonToMathjs(ast, {}).eval()\r\n                        );\r\n\r\n                        \r\n                        \r\n                        // document.getElementById('output').innerHTML = JSON.stringify(ast);\r\n                    } catch (e) {\r\n                        document.getElementById('output').innerHTML = 'ðŸ˜•';\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        function applySuperscriptAsPower(mjs, mathJson, config) {\r\n            let result = mjs;\r\n            if (\r\n                typeof mathJson === 'object' &&\r\n                mathJson.sup !== undefined\r\n            ) {\r\n                result = new window.math.expression.node.FunctionNode(\r\n                    'pow',\r\n                    [result, mathJsonToMathjs(mathJson.sup, config)]\r\n                );\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function getMathjsArgs(mathJson, config) {\r\n            let result = [];\r\n            if (Array.isArray(mathJson.arg)) {\r\n                for (\r\n                    let index = 0;\r\n                    index < mathJson.arg.length;\r\n                    index++\r\n                ) {\r\n                    result.push(\r\n                        mathJsonToMathjs(mathJson.arg[index], config)\r\n                    );\r\n                }\r\n            } else {\r\n                result = [mathJsonToMathjs(mathJson.arg, config)];\r\n            }\r\n            return result;\r\n        }\r\n        /**\r\n         * Return an array of arguments, with the sub if present as the last argument.\r\n         */\r\n        function getMathjsArgsWithSub(mathJson, config) {\r\n            const result = getMathjsArgs(mathJson, config);\r\n            if (mathJson.sub !== undefined) {\r\n                result.push(mathJsonToMathjs(mathJson.sub, config));\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Return a mathjs node tree corresponding to the MathjSON object\r\n         * @param {Object.<string,any>} mathJson\r\n         */\r\n        function mathJsonToMathjs(mathJson, config) {\r\n            let result;\r\n            if (mathJson === undefined) return undefined;\r\n\r\n            if (\r\n                typeof mathJson === 'number' ||\r\n                mathJson.num !== undefined\r\n            ) {\r\n                let n =\r\n                    typeof mathJson === 'number'\r\n                        ? mathJson\r\n                        : mathJson.num;\r\n\r\n                // Convert to BigNum if required\r\n                if (config.number === 'BigNumber')\r\n                    n = window.math.bignumber(n);\r\n\r\n                result = new window.math.expression.node.ConstantNode(\r\n                    n\r\n                );\r\n\r\n                // Apply the superscript as an operation\r\n                result = applySuperscriptAsPower(\r\n                    result,\r\n                    mathJson,\r\n                    config\r\n                );\r\n            } else if (\r\n                typeof mathJson === 'string' ||\r\n                mathJson.sym !== undefined\r\n            ) {\r\n                const BUILT_IN_CONSTANTS = {\r\n                    Ï€: window.math.pi,\r\n                    Ï„: window.math.tau, // GREEK SMALL LETTER TAU\r\n                    â„¯: window.math.e, // â„¯ SCRIPT SMALL E\r\n                    â…‡: window.math.e, // â…‡ DOUBLE-STRUCK ITALIC SMALL E\r\n                    e: window.math.e,\r\n                    Ï•: window.math.phi, //  GREEK SMALL LETTER PHI\r\n                    â…ˆ: window.math.i, // â…ˆ DOUBLE-STRUCK ITALIC SMALL I\r\n                    â…‰: window.math.i, // â…‰ DOUBLE-STRUCK ITALIC SMALL J\r\n                    i: window.math.i, //\r\n                };\r\n                const symbol =\r\n                    typeof mathJson === 'string'\r\n                        ? mathJson\r\n                        : mathJson.sym;\r\n                if (BUILT_IN_CONSTANTS[symbol]) {\r\n                    result = new window.math.expression.node.ConstantNode(\r\n                        BUILT_IN_CONSTANTS[symbol]\r\n                    );\r\n                }\r\n                result = applySuperscriptAsPower(\r\n                    result,\r\n                    mathJson,\r\n                    config\r\n                );\r\n            } else if (mathJson.op !== undefined) {\r\n                if (\r\n                    mathJson.lhs !== undefined &&\r\n                    mathJson.rhs !== undefined\r\n                ) {\r\n                    const OPERATOR_FUNCTIONS = {\r\n                        '+': 'add',\r\n                        '-': 'subtract',\r\n                        '*': 'multiply',\r\n                        '/': 'divide',\r\n                        // '.*': 'dotMultiply',\r\n                        // './': 'dotDivide',\r\n                        '%': 'mod',\r\n                        mod: 'mod',\r\n                    };\r\n                    const args = [\r\n                        mathJsonToMathjs(mathJson.lhs, config),\r\n                        mathJsonToMathjs(mathJson.rhs, config),\r\n                    ];\r\n                    result = new window.math.expression.node.OperatorNode(\r\n                        mathJson.op,\r\n                        OPERATOR_FUNCTIONS[mathJson.op],\r\n                        args\r\n                    );\r\n                } else if (mathJson.rhs !== undefined) {\r\n                    const UNARY_OPERATOR_FUNCTIONS = {\r\n                        '-': 'unaryMinus',\r\n                        '+': 'unaryPlus',\r\n                        // '~': 'bitNot',\r\n                        // 'not': 'not'\r\n                    };\r\n                    result = new window.math.expression.node.OperatorNode(\r\n                        mathJson.op,\r\n                        UNARY_OPERATOR_FUNCTIONS[mathJson.op],\r\n                        [mathJsonToMathjs(mathJson.rhs, config)]\r\n                    );\r\n                }\r\n            } else if (mathJson.fn) {\r\n                if (\r\n                    mathJson.fn === 'log' ||\r\n                    (mathJson.fn === 'ln' &&\r\n                        mathJson.fn.sub !== undefined)\r\n                ) {\r\n                    result = new window.math.expression.node.FunctionNode(\r\n                        'log',\r\n                        getMathjsArgsWithSub(mathJson, config)\r\n                    );\r\n                } else if (mathJson.fn === 'lb') {\r\n                    const args = getMathjsArgs(mathJson, config);\r\n                    args.push(\r\n                        new window.math.expression.node.ConstantNode(\r\n                            window.math.bignumber(2)\r\n                        )\r\n                    );\r\n                    result = new window.math.expression.node.FunctionNode(\r\n                        'log',\r\n                        args\r\n                    );\r\n                } else if (mathJson.fn === 'lg') {\r\n                    result = new window.math.expression.node.FunctionNode(\r\n                        new window.math.expression.node.SymbolNode(\r\n                            'log10'\r\n                        ),\r\n                        getMathjsArgs(mathJson, config)\r\n                    );\r\n                } else {\r\n                    const fnName =\r\n                        {\r\n                            '+': 'add',\r\n                            '-': 'subtract',\r\n                            '*': 'multiply',\r\n                            '/': 'divide',\r\n                            randomReal: 'random',\r\n                            randomInteger: 'randomInt',\r\n                            Gamma: 'gamma',\r\n                            Re: 're',\r\n                            Im: 'im',\r\n                            binom: 'composition',\r\n                            ucorner: 'ceil',\r\n                            lcorner: 'floor',\r\n                            arccos: 'acos',\r\n                            arcsin: 'asin',\r\n                            arctan: 'atan',\r\n                            arcosh: 'acosh',\r\n                            arsinh: 'asinh',\r\n                        }[mathJson.fn] || mathJson.fn;\r\n\r\n                    result = new window.math.expression.node.FunctionNode(\r\n                        fnName,\r\n                        getMathjsArgs(mathJson, config)\r\n                    );\r\n                }\r\n            } else if (mathJson.group) {\r\n                result = applySuperscriptAsPower(\r\n                    mathJsonToMathjs(mathJson.group, config),\r\n                    mathJson,\r\n                    config\r\n                );\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    staticCalc(q1, q2) {\r\n\r\n        let quotient_num, remainder_num;\r\n\r\n        if (q2 > q1) {\r\n            quotient_num = (Math.floor(q2 / q1));\r\n            remainder_num = (Math.floor(q2 % q1));\r\n\r\n        }\r\n\r\n        // this.setState({\r\n        //     quotient: quotient_num\r\n        // })\r\n        //console.log('quo', this.state.quotient)\r\n    }\r\n\r\n\r\n    validation(enterValue) {\r\n        let get_index = this.get_index\r\n\r\n        if (get_index === 1) {\r\n            enterValue.arg[0].num = this.state.q2\r\n        }\r\n        return false\r\n    }\r\n\r\n    addQuestion = (e) => {\r\n\r\n        this.staticCalc(this.state.q1, this.state.q2);\r\n        const enterValue = this.ast;\r\n\r\n        //this.validation(enterValue) ? console.log('test') : console.log('test1')\r\n\r\n\r\n        //console.log('quotient', quotient);\r\n        //console.log('remainder', remainder);\r\n        // const operand_one = enterValue.fn;\r\n        // const q1_num_arr = enterValue.arg\r\n        // const q1_num = enterValue.arg[0].num;\r\n        // const q2_num = enterValue.arg[1].arg[0].arg[0].num;\r\n        //const q3_num = enterValue.arg[1].arg[0].arg[1].num;\r\n        //const operand_two = enterValue.arg[1].arg[0].fn;\r\n        // const  operand_three = enterValue.arg[1].fn;\r\n\r\n        //console.log('enterValue', enterValue);\r\n        // console.log('q1_num_arr', q1_num_arr);\r\n        //console.log('q1_num', q1_num);\r\n        // console.log('q2_num', q2_num);\r\n        //console.log('q3_num', q3_num);\r\n        // console.log('operand_one', operand_one);\r\n        //  console.log('operand_two', operand_two);\r\n        // console.log('operand_three', operand_three);\r\n\r\n\r\n\r\n        let counter = this.state.count.concat([''])\r\n        // this.setState({\r\n        //     count: counter,\r\n        //     add: (!this.state.add)\r\n        // })\r\n\r\n    }\r\n\r\n\r\n    handleDelete = i => e => {\r\n        e.preventDefault()\r\n        let newarr = [\r\n            ...this.state.count.slice(0, i),\r\n            ...this.state.count.slice(i + 1)\r\n        ]\r\n        this.setState({\r\n            count: newarr\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { count } = this.state\r\n console.log(\"this.state \", this.state);\r\n\r\n        return (\r\n            <div>\r\n\r\n                <div className=\"App\">\r\n                    <p>Use Math editor for calculation </p>\r\n                    {count.length > 0 && count !== 0 ? (count.slice(0, 4).map((count, index) => (\r\n\r\n                        <div key={index} className=\"wrap-set\">\r\n                            <p>Step:&nbsp;{parseInt(`${index}`) + 1}</p>\r\n                            <span className={'fieldwrap'} ref={this.targetRef} data-value={index}></span>\r\n\r\n                            {parseInt(index) + 1 === 1 ?\r\n                                <><button onClick={this.addQuestion} className={'editor-plus btn btn-primary'}>+</button> </> :\r\n                                <><button onClick={this.handleDelete(index)} className={'editor-plus sub btn btn-primary'}>-</button>\r\n                                    <button onClick={this.addQuestion} className={'editor-plus btn btn-primary'}>+</button> </>}\r\n                        </div>\r\n                    ))) : null}\r\n\r\n                    <pre id=\"output\"></pre>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default MultiMath;"]},"metadata":{},"sourceType":"module"}