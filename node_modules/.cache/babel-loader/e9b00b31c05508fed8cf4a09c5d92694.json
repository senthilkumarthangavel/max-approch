{"ast":null,"code":"export const validate = (json, index, state) => {\n  let a = state.q1,\n      b = state.q2,\n      q = getQuotient(a, b),\n      r = getReminder(a, b);\n  console.log('aaa', a);\n\n  if (index > 0) {\n    a = state && state.data && state.data[index - 1] && state.data[index - 1]['b'] ? state.data[index - 1]['b'] : state.q2;\n    b = state && state.data && state.data[index - 1] && state.data[index - 1]['r'] ? state.data[index - 1]['r'] : state.q1;\n    q = getQuotient(a, b);\n    r = getReminder(a, b);\n  }\n\n  console.log('value_index', index);\n  console.log(\"result \", json);\n  console.log(\"state \", state);\n  console.log(\"a \", a);\n  console.log(\"b \", b);\n  console.log(\"q \", q);\n  console.log(\"r \", r); //condition1 -  Dividend check\n\n  console.log('json', json);\n  const q1_num = json.num ? json.num : json.arg[0].num;\n\n  if (parseInt(q1_num) !== parseInt(a)) {\n    return \"Dividend is not correct!\";\n  } //condition2 - first operand check\n\n\n  const operand_one = json.fn;\n\n  if (operand_one !== 'equal') {\n    return \"String must have equal!\";\n  } // condition3 -  divisor check\n\n\n  const q2_num = json.arg[1].num ? json.arg[1].num : json.arg[1].arg[0].arg[0].num;\n\n  if (parseInt(q2_num) !== parseInt(b)) {\n    return \"Divisor is not correct\";\n  } // condition4 - second operand check\n\n\n  const operand_two = json.arg[1].arg[0].fn ? json.arg[1].arg[0].fn : json.arg[1].fn; // console.log('operand_two', operand_two);\n\n  if (operand_two !== 'multiply') {\n    return \"String must have Multiply\";\n  } /// condition5 - quotient check\n\n\n  const q3_num = json.arg[1].arg[0].arg[1].num; //console.log('q3_numm', q3_num);\n\n  if (parseInt(q3_num) !== parseInt(q)) {\n    return \"quotient is not correct\";\n  } //  condition6 - third operand check\n\n\n  const operand_three = json.arg[1].fn;\n\n  if (operand_three !== 'add') {\n    return \"String must have Addition\";\n  } //  condition7 - remainder check\n\n\n  const q4_num = json.arg[1].arg[1].num; //console.log('q4_num', q4_num);\n\n  if (parseInt(q4_num) !== parseInt(r)) {\n    return \"Remainder is not correct\";\n  }\n\n  return true;\n};\nexport const getResultObject = (json, index, state) => {\n  const q1_num = parseInt(json.arg[0].num);\n  console.log('q1_numm', q1_num);\n  const q2_num = parseInt(json.arg[1].num ? json.arg[1].num : json.arg[1].arg[0].arg[0].num);\n  console.log('q2_numm', q2_num);\n  const q3_num = getQuotient(q1_num, q2_num);\n  console.log('q3_numm', q3_num);\n  const q4_num = getReminder(q1_num, q2_num);\n  console.log('q4_numm', q4_num);\n  let Obj = {\n    'a': q1_num,\n    'b': q2_num,\n    'q': q3_num,\n    'r': q4_num\n  };\n  let data = state && state.data ? state.data : {};\n  data[index] = Obj;\n  return data;\n};\n\nconst getReminder = (q1, q2) => {\n  let remainder_num;\n\n  if (q1 > q2) {\n    remainder_num = Math.floor(q1 % q2);\n  }\n\n  return remainder_num;\n};\n\nconst getQuotient = (q1, q2) => {\n  let quotient_num;\n\n  if (q1 > q2) {\n    quotient_num = Math.floor(q1 / q2);\n  }\n\n  return quotient_num;\n};","map":{"version":3,"sources":["H:/Project/Technoduce/madhu/approach/approach/src/components/explore/hcf/validation.js"],"names":["validate","json","index","state","a","q1","b","q2","q","getQuotient","r","getReminder","console","log","data","q1_num","num","arg","parseInt","operand_one","fn","q2_num","operand_two","q3_num","operand_three","q4_num","getResultObject","Obj","remainder_num","Math","floor","quotient_num"],"mappings":"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","sourcesContent":["export const validate = (json, index, state) => {\r\n\r\n    let a = state.q1, b = state.q2, q = getQuotient(a, b), r = getReminder(a, b);\r\n\r\n    console.log('aaa', a);\r\n    if (index > 0) {\r\n        a = state && state.data && state.data[index - 1] && state.data[index - 1]['b'] ? state.data[index - 1]['b'] : state.q2;\r\n        b = state && state.data && state.data[index - 1] && state.data[index - 1]['r'] ? state.data[index - 1]['r'] : state.q1;\r\n        q = getQuotient(a, b);\r\n        r = getReminder(a, b);\r\n    }\r\n\r\n\r\n    console.log('value_index', index)\r\n    console.log(\"result \", json);\r\n    console.log(\"state \", state);\r\n    console.log(\"a \", a);\r\n    console.log(\"b \", b);\r\n    console.log(\"q \", q);\r\n    console.log(\"r \", r);\r\n\r\n\r\n    //condition1 -  Dividend check\r\n    console.log('json', json)\r\n     const q1_num = json.num ? json.num : json.arg[0].num;\r\n     if (parseInt(q1_num) !== parseInt(a)) {\r\n        return \"Dividend is not correct!\";\r\n    }\r\n\r\n    //condition2 - first operand check\r\n    const operand_one = json.fn;\r\n     if (operand_one !== 'equal') {\r\n        return \"String must have equal!\";\r\n    }\r\n\r\n    // condition3 -  divisor check\r\n    const q2_num = json.arg[1].num ? json.arg[1].num : json.arg[1].arg[0].arg[0].num;\r\n    if (parseInt(q2_num) !== parseInt(b)) {\r\n        return \"Divisor is not correct\"\r\n    }\r\n\r\n    // condition4 - second operand check\r\n\r\n    const operand_two = json.arg[1].arg[0].fn ? json.arg[1].arg[0].fn : json.arg[1].fn;\r\n   // console.log('operand_two', operand_two);\r\n    if (operand_two !== 'multiply') {\r\n        return \"String must have Multiply\"\r\n    }\r\n\r\n    /// condition5 - quotient check\r\n    const q3_num = json.arg[1].arg[0].arg[1].num;\r\n    //console.log('q3_numm', q3_num);\r\n    if(parseInt(q3_num) !== parseInt(q)){\r\n        return \"quotient is not correct\"\r\n    }\r\n\r\n    //  condition6 - third operand check\r\n    const operand_three = json.arg[1].fn;\r\n    if(operand_three !== 'add'){\r\n        return \"String must have Addition\"\r\n    } \r\n\r\n    //  condition7 - remainder check\r\n    const q4_num = json.arg[1].arg[1].num;\r\n    //console.log('q4_num', q4_num);\r\n    if(parseInt(q4_num) !== parseInt(r)){\r\n        return \"Remainder is not correct\"\r\n    } \r\n\r\n    return true;\r\n};\r\n\r\nexport const getResultObject = (json, index, state) => {\r\n\r\n    const q1_num = parseInt(json.arg[0].num);\r\n    console.log('q1_numm', q1_num);\r\n    const q2_num = parseInt(json.arg[1].num ? json.arg[1].num : json.arg[1].arg[0].arg[0].num);\r\n    console.log('q2_numm', q2_num)\r\n    const q3_num = getQuotient(q1_num, q2_num);\r\n    console.log('q3_numm', q3_num)\r\n    const q4_num = getReminder(q1_num, q2_num);\r\n    console.log('q4_numm', q4_num);\r\n   \r\n\r\n    let Obj = {\r\n        'a': q1_num,\r\n        'b': q2_num,\r\n        'q': q3_num,\r\n        'r': q4_num,\r\n    };\r\n\r\n    let data = state && state.data ? state.data : {};\r\n    data[index] = Obj;\r\n\r\n    return data;\r\n}\r\n\r\nconst getReminder = (q1, q2) => {\r\n\r\n    let remainder_num;\r\n\r\n    if (q1 > q2) {\r\n        remainder_num = (Math.floor(q1 % q2));\r\n    }\r\n    return remainder_num;\r\n}\r\n\r\nconst getQuotient = (q1, q2) => {\r\n\r\n    let quotient_num;\r\n\r\n    if (q1 > q2) {\r\n        quotient_num = (Math.floor(q1 / q2));\r\n    } \r\n\r\n    return quotient_num;\r\n}"]},"metadata":{},"sourceType":"module"}