"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("mathlive/dist/mathlive.core.css");
require("mathlive/dist/mathlive.css");
var React = require("react");
var mathlive_1 = require("mathlive");
function combineConfig(props) {
    var combinedConfiguration = __assign({}, props.mathFieldConfig);
    var onChange = props.onChange;
    if (onChange) {
        if (props.mathFieldConfig && props.mathFieldConfig.onContentDidChange) {
            var fromConfig_1 = props.mathFieldConfig.onContentDidChange;
            combinedConfiguration.onContentDidChange = function (mf) {
                onChange(mf.$latex());
                fromConfig_1(mf);
            };
        }
        else {
            combinedConfiguration.onContentDidChange = function (mf) { return onChange(mf.$latex()); };
        }
    }
    return combinedConfiguration;
}
exports.combineConfig = combineConfig;
/** A react-control that hosts a mathlive-mathfield in it. */
var MathFieldComponent = /** @class */ (function (_super) {
    __extends(MathFieldComponent, _super);
    function MathFieldComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.insertElement = null;
        _this.combinedConfiguration = combineConfig(_this.props);
        return _this;
    }
    MathFieldComponent.prototype.componentDidUpdate = function (prevProps) {
        if (!this.mathField) {
            throw new Error("Component was not correctly initialized.");
        }
        var p = {
            prevProps: prevProps,
            props: this.props,
        };
        if (prevProps.latex !== undefined) {
            if (this.props.latex === undefined) {
                throw new Error("Cannot change from controlled to uncontrolled state!");
            }
            if (this.props.latex !== prevProps.latex) {
                if (this.props.latex === "") {
                    this.mathField.$perform("deleteAll");
                }
                else {
                    this.mathField.$latex(this.props.latex, { suppressChangeNotifications: true });
                }
            }
        }
    };
    MathFieldComponent.prototype.render = function () {
        var _this = this;
        return React.createElement("div", { ref: function (instance) { return _this.insertElement = instance; } });
    };
    MathFieldComponent.prototype.componentDidMount = function () {
        var _a;
        if (!this.insertElement) {
            throw new Error("React did apparently not mount the insert point correctly.");
        }
        var initialValue = (_a = this.props.initialLatex, (_a !== null && _a !== void 0 ? _a : this.props.latex));
        this.mathField = mathlive_1.makeMathField(this.insertElement, this.combinedConfiguration);
        this.mathField.$latex(initialValue, { suppressChangeNotifications: true });
        if (this.props.mathFieldRef) {
            this.props.mathFieldRef(this.mathField);
        }
    };
    return MathFieldComponent;
}(React.Component));
exports.MathFieldComponent = MathFieldComponent;
//# sourceMappingURL=MathFieldComponent.js.map